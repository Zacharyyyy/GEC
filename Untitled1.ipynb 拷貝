{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import argparse\n",
    "import kenlm\n",
    "import os\n",
    "import re\n",
    "import spacy\n",
    "from hunspell import Hunspell"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "lm = kenlm.Model(\"1b_02.bin\")\n",
    "# Load spaCy\n",
    "nlp = spacy.load(\"en\")\n",
    "# Hunspell spellchecker: https://pypi.python.org/pypi/CyHunspell\n",
    "# CyHunspell seems to be more accurate than Aspell in PyEnchant, but a bit slower.\n",
    "#gb = Hunspell(\"en_GB-large\", hunspell_data_dir=basename+'/resources/spelling/')\n",
    "gb = Hunspell('en_GB')\n",
    "# Inflection forms: http://wordlist.aspell.net/other/\n",
    "gb_infl = loadWordFormDict(\"/Users/zackary/Desktop/agid-2016.01.19/infl.txt\")\n",
    "# List of common determiners\n",
    "det = {\"\", \"the\", \"a\", \"an\"}\n",
    "# List of common prepositions\n",
    "prep = {\"\", \"about\", \"at\", \"by\", \"for\", \"from\", \"in\", \"of\", \"on\", \"to\", \"with\", \"or\"}\n",
    "ob = {\"this\", \"these\", \"the\", \"those\", \"that\"}\n",
    "# Save the above in a dictionary:\n",
    "res_dict = {\"lm\": lm,\n",
    "            \"nlp\": nlp,\n",
    "            \"gb\": gb,\n",
    "            \"gb_infl\": gb_infl,\n",
    "            \"det\": det,\n",
    "            \"prep\": prep,\n",
    "            \"ob\" : ob\n",
    "           }"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "def loadWordFormDict(path):\n",
    "    entries = open(path).read().strip().split(\"\\n\")\n",
    "    form_dict = {}\n",
    "    for entry in entries:\n",
    "        entry = entry.split(\": \")\n",
    "        key = entry[0].split()\n",
    "        forms = entry[1]\n",
    "        # The word lemma\n",
    "        word = key[0]\n",
    "        # Ignore some of the extra markup in the forms\n",
    "        forms = re.sub(\"[012~<,_!\\?\\.\\|]+\", \"\", forms)\n",
    "        forms = re.sub(\"\\{.*?\\}\", \"\", forms).split()\n",
    "        # Save the lemma and unique forms in the form dict\n",
    "        form_dict[word] = set([word]+forms)\n",
    "    return form_dict"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "def add_word(masked_index, tokenized_text):\n",
    "    # Convert token to vocabulary indices\n",
    "    return_list = []\n",
    "    indexed_tokens = tokenizer.convert_tokens_to_ids(tokenized_text)\n",
    "    \n",
    "    tokens_tensor = torch.tensor([indexed_tokens])\n",
    "    # Define sentence A and B indices associated to 1st and 2nd sentences (see paper)\n",
    "    segments_ids = [1] * len(tokenized_text)\n",
    "    # this is for the dummy first sentence. \n",
    "    segments_ids[0] = 0\n",
    "    segments_ids[1] = 0\n",
    "    segments_tensors = torch.tensor([segments_ids])\n",
    "    # Predict all tokens\n",
    "    predictions = model(tokens_tensor, segments_tensors)\n",
    "    predicted_index = torch.argmax(predictions[0, masked_index]).item()\n",
    "    predicted_token = tokenizer.convert_ids_to_tokens([predicted_index])\n",
    "    return_list.append(predicted_token[0])\n",
    "    # next 5\n",
    "    for _ in range(3):\n",
    "            #print(\"best: \", best_sent)\n",
    "            tokenized_text_2 = tokenized_text\n",
    "            predictions[0,masked_index,predicted_index] = -11100000\n",
    "            predicted_index = torch.argmax(predictions[0, masked_index]).item()\n",
    "            predicted_token1 = tokenizer.convert_ids_to_tokens([predicted_index])\n",
    "            return_list.append(predicted_token1[0])\n",
    "    return return_list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "def valuing(sent, orig_prob, thre, place):\n",
    "    sent.pop(place)\n",
    "    cand_prob = res_dict[\"lm\"].score(\" \".join(sent), bos=True, eos=True)/len(sent)\n",
    "    if cand_prob / orig_prob < thre:\n",
    "        print(cand_prob, \"\\t\", orig_prob)\n",
    "        print(\"likely\\t\\t\", end = \"\")\n",
    "        sent.insert(place, \"***\")\n",
    "        sent.insert(place, \"***\")\n",
    "        print(\" \".join(sent))\n",
    "        sent.pop(place)\n",
    "        sent.pop(place)\n",
    "        return sent"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "def processWithSpacy(sent, nlp):\n",
    "    proc_sent = nlp.tokenizer.tokens_from_list(sent)\n",
    "    nlp.tagger(proc_sent)\n",
    "    return proc_sent"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "def generateCands(tok_id, cands, sent, weight, error_type):\n",
    "    # Save candidates here.\n",
    "    edit_dict = {}\n",
    "    # Loop through the input alternative candidates\n",
    "    for cand in cands:\n",
    "        # Copy the input sentence\n",
    "        new_sent = sent[:]\n",
    "        # Change the target token with the current cand\n",
    "        new_sent[tok_id] = cand\n",
    "        # Remove empty strings from the list (for deletions)\n",
    "        new_sent = list(filter(None, new_sent))\n",
    "        # Give the edit a unique identifier\n",
    "        edit_id = (tok_id, cand, weight)\n",
    "        # Save non-empty sentences\n",
    "        if new_sent: edit_dict[edit_id] = new_sent\n",
    "    return edit_dict"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "def processSent(sent, j):\n",
    "    ret_cand = []\n",
    "    # Process sent with spacy\n",
    "    proc_sent = processWithSpacy(sent, res_dict[\"nlp\"])\n",
    "    # Calculate avg token prob of the sent so far.\n",
    "    orig_prob = res_dict[\"lm\"].score(proc_sent.text, bos=True, eos=True)/len(proc_sent)\n",
    "    #print(\"orig: \", orig_prob)\n",
    "    # Store all the candidate corrected sentences here\n",
    "    cand_dict = {}\n",
    "    # Process each token.\n",
    "    for tok in proc_sent:\n",
    "        # SPELLCHECKING\n",
    "        # Spell check: tok must be alphabetical and not a real word.\n",
    "                             #and not res_dict[\"gb\"].spell(tok.text):\n",
    "        if tok.text.isalpha():\n",
    "            cands = res_dict[\"gb\"].suggest(tok.text)\n",
    "            # Generate correction candidates\n",
    "            \n",
    "            if orig_prob < -3.2:\n",
    "                cand_dict.update(generateCands(tok.i, cands, sent, 0.98, 1))\n",
    "            elif orig_prob < -2.7:\n",
    "                cand_dict.update(generateCands(tok.i, cands, sent, 0.96, 1))\n",
    "            elif orig_prob < -2.2:\n",
    "                cand_dict.update(generateCands(tok.i, cands, sent, 0.95, 1))\n",
    "            else:\n",
    "                cand_dict.update(generateCands(tok.i, cands, sent, 0.92, 1))   \n",
    "        \n",
    "            #print(thre1, end=\"\")\n",
    "            #if cands: cand_dict.update(generateCands(tok.i, cands, sent, 0.95, 1))\n",
    "        \"\"\"\n",
    "        # add only [a, an, the]\n",
    "        sent2 = sent[:]\n",
    "        text = \" \".join(sent2)\n",
    "        tokenized_text = tokenizer.tokenize(text)\n",
    "        tokenized_text.insert(tok.i + 1, \"[MASK]\")\n",
    "        cands = [\"a\", \"an\", \"the\"]\n",
    "        if orig_prob < -3.0:\n",
    "            cand_dict.update(generateCands(tok.i + 1, cands, tokenized_text, 0.9, 2))\n",
    "        elif orig_prob < -2.6:\n",
    "            cand_dict.update(generateCands(tok.i + 1, cands, tokenized_text, 0.91, 2))\n",
    "        elif orig_prob < -2.3:\n",
    "            cand_dict.update(generateCands(tok.i + 1, cands, tokenized_text, 0.92, 2))\n",
    "        else:\n",
    "            cand_dict.update(generateCands(tok.i + 1, cands, tokenized_text, 0.93, 2))   \n",
    "        \n",
    "        if tok.text.isalpha():\n",
    "            cands = res_dict[\"gb\"].suggest(tok.text)\n",
    "            # Generate correction candidates\n",
    "            if orig_prob < -3.5:\n",
    "                cand_dict.update(generateCands(tok.i, cands, sent, 0.8, 1))\n",
    "            elif orig_prob < -3.0:\n",
    "                cand_dict.update(generateCands(tok.i, cands, sent, 0.92, 1))\n",
    "            elif orig_prob < -2.6:\n",
    "                cand_dict.update(generateCands(tok.i, cands, sent, 0.94, 1))\n",
    "            elif orig_prob < -2.4:\n",
    "                cand_dict.update(generateCands(tok.i, cands, sent, 0.96, 1))\n",
    "            else :\n",
    "                cand_dict.update(generateCands(tok.i, cands, sent, 0.97, 1))\n",
    "            #print(thre1, end=\"\")\n",
    "            #if cands: cand_dict.update(generateCands(tok.i, cands, sent, 0.95))\n",
    "        \n",
    "        # add words\n",
    "        sent2 = sent[:]\n",
    "        text = \" \".join(sent2)\n",
    "        tokenized_text = tokenizer.tokenize(text)\n",
    "        tokenized_text.insert(tok.i + 1, \"[MASK]\")\n",
    "        cands = add_word(tok.i + 1, tokenized_text)\n",
    "        if orig_prob < -3.0:\n",
    "            cand_dict.update(generateCands(tok.i + 1, cands, tokenized_text, 0.8, 2))\n",
    "        elif orig_prob < -2.6:\n",
    "            cand_dict.update(generateCands(tok.i + 1, cands, tokenized_text, 0.85, 2))\n",
    "        elif orig_prob < -2.3:\n",
    "            cand_dict.update(generateCands(tok.i + 1, cands, tokenized_text, 0.87, 2))\n",
    "        else:\n",
    "            cand_dict.update(generateCands(tok.i + 1, cands, tokenized_text, 0.88, 2))\n",
    "        \n",
    "        \n",
    "        # reduce words\n",
    "        sent1 = sent[:]\n",
    "        if orig_prob < -3.0:\n",
    "            cand_dict.update(generateCands(tok.i, [\"\"], sent, 0.9, 1))\n",
    "        elif orig_prob < -2.6:\n",
    "            cand_dict.update(generateCands(tok.i, [\"\"], sent, 0.88, 1))\n",
    "        elif orig_prob < -2.3:\n",
    "            cand_dict.update(generateCands(tok.i, [\"\"], sent, 0.82, 1))\n",
    "        elif orig_prob < -2.0:\n",
    "            cand_dict.update(generateCands(tok.i, [\"\"], sent, 0.8, 1))\n",
    "        else: \n",
    "            cand_dict.update(generateCands(tok.i, [\"\"], sent, 0.75, 1))\n",
    "        \n",
    "        \n",
    "        # MORPHOLOGY\n",
    "        if tok.lemma_ in res_dict[\"gb_infl\"]:\n",
    "            cands = res_dict[\"gb_infl\"][tok.lemma_]\n",
    "            if orig_prob < -3.0:\n",
    "                cand_dict.update(generateCands(tok.i, cands, sent, 0.95, 3))\n",
    "            elif orig_prob < -2.6:\n",
    "                cand_dict.update(generateCands(tok.i, cands, sent, 0.96, 3))\n",
    "            elif orig_prob < -2.3:\n",
    "                cand_dict.update(generateCands(tok.i, cands, sent, 0.97, 3))\n",
    "            else :\n",
    "                cand_dict.update(generateCands(tok.i, cands, sent, 0.985, 3))\n",
    "            #print(cands)\n",
    "            #cand_dict.update(generateCands(tok.i, cands, sent, 0.96))\n",
    "        \"\"\"\n",
    "        \n",
    "        # MORPHOLOGY\n",
    "        if tok.lemma_ in res_dict[\"gb_infl\"]:\n",
    "            cands = res_dict[\"gb_infl\"][tok.lemma_]\n",
    "            \n",
    "            if orig_prob < -3.2:\n",
    "                cand_dict.update(generateCands(tok.i, cands, sent, 0.99, 3))\n",
    "            elif orig_prob < -2.45:\n",
    "                cand_dict.update(generateCands(tok.i, cands, sent, 0.985, 3))\n",
    "            elif orig_prob < -1.8:\n",
    "                cand_dict.update(generateCands(tok.i, cands, sent, 0.98, 3))\n",
    "            else :\n",
    "                cand_dict.update(generateCands(tok.i, cands, sent, 0.945, 3))\n",
    "            \n",
    "            #print(cands)\n",
    "            #cand_dict.update(generateCands(tok.i, cands, sent, 0.98, 3))\n",
    "        # DETERMINERS\n",
    "        if tok.text in res_dict[\"det\"]:\n",
    "            if orig_prob < -2.85:\n",
    "                cand_dict.update(generateCands(tok.i, res_dict[\"det\"], sent, 0.97, 4))\n",
    "            elif orig_prob < -2.5:\n",
    "                cand_dict.update(generateCands(tok.i, res_dict[\"det\"], sent, 0.96, 4))\n",
    "            elif orig_prob < -1.85:\n",
    "                cand_dict.update(generateCands(tok.i, res_dict[\"det\"], sent, 0.95, 4))\n",
    "            else:\n",
    "                cand_dict.update(generateCands(tok.i, res_dict[\"det\"], sent, 0.935, 4))\n",
    "            \n",
    "            #print(thre3, end=\"\")\n",
    "            #cand_dict.update(generateCands(tok.i, res_dict[\"det\"], sent, 0.95, 4))\n",
    "        # PREPOSITIONS\n",
    "        if tok.text in res_dict[\"prep\"]:\n",
    "            \n",
    "            if orig_prob < -2.9:\n",
    "                cand_dict.update(generateCands(tok.i, res_dict[\"prep\"], sent, 0.93, 5))\n",
    "            elif orig_prob < -2.5:\n",
    "                cand_dict.update(generateCands(tok.i, res_dict[\"prep\"], sent, 0.94, 5))\n",
    "            elif orig_prob < -1.8:\n",
    "                cand_dict.update(generateCands(tok.i, res_dict[\"prep\"], sent, 0.96, 5))  \n",
    "            else:\n",
    "                cand_dict.update(generateCands(tok.i, res_dict[\"prep\"], sent, 0.98, 5))\n",
    "            \n",
    "            #print(thre4, end=\"\")\n",
    "            #cand_dict.update(generateCands(tok.i, res_dict[\"prep\"], sent, 0.97, 5))\n",
    "    # Keep track of the best sent if any\n",
    "    best_prob = float(\"-inf\")\n",
    "    best_sent = []\n",
    "    # Loop through the candidate edits; edit[-1] is the error type weight\n",
    "    for edit, cand_sent in cand_dict.items():\n",
    "        # Score the candidate sentence\n",
    "        cand_prob = res_dict[\"lm\"].score(\" \".join(cand_sent), bos=True, eos=True)/len(cand_sent)\n",
    "        \"\"\"\n",
    "        print(cand_prob, \"\\t\", orig_prob)\n",
    "        print(\"likely\\t\\t\", end = \"\")\n",
    "        cand_sent.insert(edit[0], \"***\")\n",
    "        cand_sent.insert(edit[0]+2, \"***\")\n",
    "        print(\" \".join(cand_sent))\n",
    "        cand_sent.pop(edit[0])\n",
    "        cand_sent.pop(edit[0]+1)\n",
    "        \"\"\"\n",
    "        if cand_prob / orig_prob < edit[-1]:\n",
    "            \n",
    "            print(cand_prob, \"\\t\", orig_prob)\n",
    "            print(\"likely\\t\\t\", end = \"\")\n",
    "            \n",
    "            if edit[1] != \"\":\n",
    "                cand_sent.insert(edit[0], \"***\")\n",
    "                cand_sent.insert(edit[0]+2, \"***\")\n",
    "                print(\" \".join(cand_sent))\n",
    "                cand_sent.pop(edit[0])\n",
    "                cand_sent.pop(edit[0]+1)\n",
    "            else:\n",
    "                cand_sent.insert(edit[0], \"***\")\n",
    "                cand_sent.insert(edit[0]+1, \"***\")\n",
    "                print(\" \".join(cand_sent))\n",
    "                cand_sent.pop(edit[0])\n",
    "                cand_sent.pop(edit[0])\n",
    "            \n",
    "            ret_cand.append(\" \".join(cand_sent))\n",
    "        \n",
    "        if cand_prob > (1 - (1 - edit[-1])/j)*orig_prob and cand_prob > best_prob:\n",
    "            best_prob = cand_prob\n",
    "            best_sent = cand_sent\n",
    "    \n",
    "    # Return the best sentence and a boolean whether to search for more errors\n",
    "    if best_sent: return best_sent, True\n",
    "    else: return sent, False\n",
    "    \n",
    "    #if ret_cand: return ret_cand\n",
    "    #else: return \" \".join(sent)\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 663,
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "Cannot convert <class 'spacy.tokens.doc.Doc'> to string",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-663-cddec54bf2ee>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     27\u001b[0m     \u001b[0mj\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     28\u001b[0m     \u001b[0;32mwhile\u001b[0m \u001b[0mhas_errors\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 29\u001b[0;31m         \u001b[0msent\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mhas_errors\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mprocessSent\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msent\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mj\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     30\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     31\u001b[0m     \u001b[0mout_ques\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwrite\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mwhole\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;34m\"\\n\\n\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m<ipython-input-662-92ba52fc6a03>\u001b[0m in \u001b[0;36mprocessSent\u001b[0;34m(sent, j)\u001b[0m\n\u001b[1;32m     60\u001b[0m         \u001b[0;31m# PREPOSITIONS\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     61\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mtok\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtext\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mres_dict\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"prep\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 62\u001b[0;31m             \u001b[0mana_error\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtok\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mres_dict\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"prep\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msent\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0morig_prob\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m5\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     63\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0morig_prob\u001b[0m \u001b[0;34m<\u001b[0m \u001b[0;34m-\u001b[0m\u001b[0;36m2.9\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     64\u001b[0m                 \u001b[0mcand_dict\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mgenerateCands\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtok\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mres_dict\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"prep\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msent\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0.93\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m5\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m<ipython-input-661-d837ff2eb9b9>\u001b[0m in \u001b[0;36mana_error\u001b[0;34m(tok_id, cands, sent, orig_prob, error_type)\u001b[0m\n\u001b[1;32m     19\u001b[0m         \u001b[0mproc_sent\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mprocessWithSpacy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnew_sent\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mres_dict\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"nlp\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     20\u001b[0m         \u001b[0;31m# Calculate avg token prob of the sent so far.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 21\u001b[0;31m         \u001b[0mprob\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mres_dict\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"lm\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mscore\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mproc_sent\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbos\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0meos\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m/\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mproc_sent\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     22\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0morig_prob\u001b[0m \u001b[0;34m<\u001b[0m \u001b[0;34m-\u001b[0m\u001b[0;36m3.0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     23\u001b[0m             \u001b[0merror\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m4\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mprob\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32mkenlm.pyx\u001b[0m in \u001b[0;36mkenlm.Model.score\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32mkenlm.pyx\u001b[0m in \u001b[0;36mkenlm.as_str\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;31mTypeError\u001b[0m: Cannot convert <class 'spacy.tokens.doc.Doc'> to string"
     ]
    }
   ],
   "source": [
    "out_ans = open('out_ans.m2', \"w\")\n",
    "out_ques = open('out_ques.m2', \"w\")\n",
    "i = 0\n",
    "org = open('a.txt', \"r\")\n",
    "\n",
    "error1 = 0\n",
    "error2 = 0\n",
    "for whole in org.read().split(\"\\n\\n\"):\n",
    "    sent = whole.split(\"S \")[1]\n",
    "    this = len(sent.split(\"\\n\")) - 1\n",
    "    sent = sent.split(\"\\n\")[0]\n",
    "    error1 = error1 + this\n",
    "    i = i + 1\n",
    "    upper = False\n",
    "    if sent.isupper(): \n",
    "        sent = sent.lower()\n",
    "        upper = True\n",
    "    # Strip whitespace and split sent into tokens.\n",
    "    sent = sent.strip().split()\n",
    "    # If the line is empty, preserve the newline in output and continue\n",
    "    if not sent: \n",
    "        out_sents.write(\"\\n\")\n",
    "        print(\"aa\")\n",
    "        continue\n",
    "    # Search for and make corrections while has_errors is true\n",
    "    has_errors = True\n",
    "    j = 1\n",
    "    while has_errors:\n",
    "        sent, has_errors = processSent(sent, j)\n",
    "    \n",
    "    out_ques.write(whole + \"\\n\\n\")\n",
    "    out_ques.flush()\n",
    "    out_ans.write(\" \".join(sent) + \"\\n\")\n",
    "    out_ans.flush()\n",
    "    \"\"\"\n",
    "    for cand in sents:\n",
    "        out_ques.write(whole + \"\\n\\n\")\n",
    "        error2 = error2 + this\n",
    "        out_ques.flush()\n",
    "        if type(sents) is list:\n",
    "            out_ans.write(cand + \"\\n\")\n",
    "            out_ans.flush()\n",
    "            print(cand)\n",
    "        else:\n",
    "            out_ans.write(sents + \"\\n\")\n",
    "            out_ans.flush()\n",
    "            print(sents)\n",
    "            break\n",
    "    \"\"\"\n",
    "    print(i)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "S If not their family then who else that are willing to do that ?\n",
    "A 4 4|||Mec|||,|||REQUIRED|||-NONE-|||0\n",
    "A 4 5|||Trans||||||REQUIRED|||-NONE-|||0\n",
    "A 7 8|||Ssub||||||REQUIRED|||-NONE-|||0\n",
    "A 8 9|||SVA|||is|||REQUIRED|||-NONE-|||0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 597,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0\n",
      "-2.506728036063058 \t -2.7378868829636347\n",
      "likely\t\tIn retrospect , *** it *** is also ones duty to ensure that he or she undergo periodic healthchecks in their own .\n",
      "-2.5931263878231956 \t -2.7378868829636347\n",
      "likely\t\tIn retrospect , its is also *** one *** duty to ensure that he or she undergo periodic healthchecks in their own .\n",
      "-2.5931263878231956 \t -2.7378868829636347\n",
      "likely\t\tIn retrospect , its is also *** one *** duty to ensure that he or she undergo periodic healthchecks in their own .\n",
      "-2.632716950916109 \t -2.7378868829636347\n",
      "likely\t\tIn retrospect , its is also ones duty to ensure that he or she *** undergoes *** periodic healthchecks in their own .\n",
      "-2.6048801967075894 \t -2.7378868829636347\n",
      "likely\t\tIn retrospect , its is also ones duty to ensure that he or she undergo periodic *** health checks *** in their own .\n",
      "-2.58441162109375 \t -2.7378868829636347\n",
      "likely\t\tIn retrospect , its is also ones duty to ensure that he or she undergo periodic *** healthcare *** in their own .\n",
      "1\n",
      "-2.331526438395182 \t -2.506728036063058\n",
      "likely\t\tIn retrospect , it is also *** one *** duty to ensure that he or she undergo periodic healthchecks in their own .\n",
      "-2.331526438395182 \t -2.506728036063058\n",
      "likely\t\tIn retrospect , it is also *** one *** duty to ensure that he or she undergo periodic healthchecks in their own .\n",
      "-2.401558104015532 \t -2.506728036063058\n",
      "likely\t\tIn retrospect , it is also ones duty to ensure that he or she *** undergoes *** periodic healthchecks in their own .\n",
      "-2.373721168154762 \t -2.506728036063058\n",
      "likely\t\tIn retrospect , it is also ones duty to ensure that he or she undergo periodic *** health checks *** in their own .\n",
      "-2.3532527741931735 \t -2.506728036063058\n",
      "likely\t\tIn retrospect , it is also ones duty to ensure that he or she undergo periodic *** healthcare *** in their own .\n",
      "-2.4314153762090776 \t -2.506728036063058\n",
      "likely\t\tIn retrospect , it is also ones duty to ensure that he or she undergo periodic healthchecks *** on *** their own .\n",
      "2\n",
      "-2.2263563246954057 \t -2.331526438395182\n",
      "likely\t\tIn retrospect , it is also one duty to ensure that he or she *** undergoes *** periodic healthchecks in their own .\n",
      "-2.198519752139137 \t -2.331526438395182\n",
      "likely\t\tIn retrospect , it is also one duty to ensure that he or she undergo periodic *** health checks *** in their own .\n",
      "-2.1780511765252974 \t -2.331526438395182\n",
      "likely\t\tIn retrospect , it is also one duty to ensure that he or she undergo periodic *** healthcare *** in their own .\n",
      "-2.2562137785412015 \t -2.331526438395182\n",
      "likely\t\tIn retrospect , it is also one duty to ensure that he or she undergo periodic healthchecks *** on *** their own .\n",
      "3\n",
      "-2.072881062825521 \t -2.1780511765252974\n",
      "likely\t\tIn retrospect , it is also one duty to ensure that he or she *** undergoes *** periodic healthcare in their own .\n",
      "-2.105285099574498 \t -2.1780511765252974\n",
      "likely\t\tIn retrospect , it is also one duty to ensure that he or she undergo periodic healthcare *** from *** their own .\n",
      "4\n",
      "-2.000114985874721 \t -2.072881062825521\n",
      "likely\t\tIn retrospect , it is also one duty to ensure that he or she undergoes periodic healthcare *** from *** their own .\n",
      "5\n"
     ]
    }
   ],
   "source": [
    "\n",
    "#sent  = \"Does one who suffered from this disease keep it a secret of infrom their relatives ?\"\n",
    "#sent = \"Large numbers of patients with the genetic risk would want to keep it as a secret as the genetic risk may indicates their high chance to carry certain disease .\"\n",
    "#sent = \"Therefore , people may not contact with the faraway friends and relatives unless there was something important .\"\n",
    "#sent = \"However , people now can contact with anyone all over the world who can use computer at any time , and\"\n",
    "#sent = \"When we are diagonosed out with certain genetic disease , are we suppose to disclose this result to our relatives ?\"\n",
    "#sent = \"There are always newspaper reports that a new born baby has been abandoned at a hospital after they realized the baby have diseases that need a huge amount of money to secure .\"\n",
    "#sent = \"If a gene run in the family , one of the family member test positive , whom does he need to tell .\"\n",
    "#sent = \"As a result , it is in the interests of the carriers and their relatives , telling the genetic testing result is needed .\"\n",
    "#sent = \"I would like to see flight arriving Dallas next day .\"\n",
    "#sent = \"accepting unwilling situation that you can not change.\"\n",
    "#sent = \"Some will wish to keep it to themselves and hope to ensure that they will not bring in any pessimism into their family .\"\n",
    "#sent = \"Focus on the negative side of the genetic risk first .\"\n",
    "sent = \"In retrospect , its is also ones duty to ensure that he or she undergo periodic healthchecks in their own .\"\n",
    "upper = False\n",
    "if sent.isupper(): \n",
    "    sent = sent.lower()\n",
    "    pper = True\n",
    "# Strip whitespace and split sent into tokens.\n",
    "sent = sent.strip().split()\n",
    "# If the line is empty, preserve the newline in output and continue\n",
    "\n",
    "# Search for and make corrections while has_errors is true\n",
    "has_errors = True\n",
    "i = 0\n",
    "while has_errors:\n",
    "    print(i)\n",
    "    i = i + 1\n",
    "    sent, has_errors = processSent(sent, 1)\n",
    "\n",
    "\"\"\"\n",
    "for sent1 in sents:\n",
    "    if isinstance(sent1, list):\n",
    "        print(sent1)\n",
    "    else:\n",
    "        print(sents)\n",
    "        break\n",
    "\"\"\"  \n",
    "# Join all the tokens back together and upper case first char\n",
    "sent = \" \".join(sent)\n",
    "sent = sent[0].upper()+sent[1:]\n",
    "# Convert all upper case sents back to all upper case.\n",
    "if upper: sent = sent.upper()\n",
    "# Write the corrected sentence\n",
    "# Write the corrected sentence and a newline.\n",
    "#print(sent)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 445,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-37.725433349609375"
      ]
     },
     "execution_count": 445,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "res_dict[\"lm\"].score(sent, bos=True, eos=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 304,
   "metadata": {},
   "outputs": [],
   "source": [
    "sent = \"People with close blood relationship generally.\"\n",
    "sent = \"I am looking forway to see you soon.\"\n",
    "sent = \"I could understand the feeling of the carrier .\"\n",
    "upper = False\n",
    "if sent.isupper(): \n",
    "    sent = sent.lower()\n",
    "    upper = True\n",
    "# Strip whitespace and split sent into tokens.\n",
    "sent = sent.strip().split()\n",
    "# If the line is empty, preserve the newline in output and continue\n",
    "# Search for and make corrections while has_errors is true\n",
    "has_errors = True\n",
    "while has_errors:\n",
    "    sent, has_errors = processSent(sent)\n",
    "# Join all the tokens back together and upper case first char\n",
    "sent = \" \".join(sent)\n",
    "sent = sent[0].upper()+sent[1:]\n",
    "# Convert all upper case sents back to all upper case.\n",
    "if upper: sent = sent.upper()\n",
    "# Write the corrected sentence\n",
    "# Write the corrected sentence and a newline.\n",
    "#out_sents.write(sent+\"\\n\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 265,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "('it self', 'it-self', 'its elf', 'its-elf', 'itself')"
      ]
     },
     "execution_count": 265,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gb1 = Hunspell('en_GB')\n",
    "gb1.suggest(\"itself\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 264,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'itselves', 'itself', 'itselfs'}\n"
     ]
    }
   ],
   "source": [
    "cands = res_dict[\"gb_infl\"][\"itself\"]\n",
    "print(cands)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [],
   "source": [
    "import torch\n",
    "from pytorch_pretrained_bert import BertTokenizer, BertModel, BertForMaskedLM"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "BertForMaskedLM(\n",
       "  (bert): BertModel(\n",
       "    (embeddings): BertEmbeddings(\n",
       "      (word_embeddings): Embedding(30522, 768, padding_idx=0)\n",
       "      (position_embeddings): Embedding(512, 768)\n",
       "      (token_type_embeddings): Embedding(2, 768)\n",
       "      (LayerNorm): BertLayerNorm()\n",
       "      (dropout): Dropout(p=0.1)\n",
       "    )\n",
       "    (encoder): BertEncoder(\n",
       "      (layer): ModuleList(\n",
       "        (0): BertLayer(\n",
       "          (attention): BertAttention(\n",
       "            (self): BertSelfAttention(\n",
       "              (query): Linear(in_features=768, out_features=768, bias=True)\n",
       "              (key): Linear(in_features=768, out_features=768, bias=True)\n",
       "              (value): Linear(in_features=768, out_features=768, bias=True)\n",
       "              (dropout): Dropout(p=0.1)\n",
       "            )\n",
       "            (output): BertSelfOutput(\n",
       "              (dense): Linear(in_features=768, out_features=768, bias=True)\n",
       "              (LayerNorm): BertLayerNorm()\n",
       "              (dropout): Dropout(p=0.1)\n",
       "            )\n",
       "          )\n",
       "          (intermediate): BertIntermediate(\n",
       "            (dense): Linear(in_features=768, out_features=3072, bias=True)\n",
       "          )\n",
       "          (output): BertOutput(\n",
       "            (dense): Linear(in_features=3072, out_features=768, bias=True)\n",
       "            (LayerNorm): BertLayerNorm()\n",
       "            (dropout): Dropout(p=0.1)\n",
       "          )\n",
       "        )\n",
       "        (1): BertLayer(\n",
       "          (attention): BertAttention(\n",
       "            (self): BertSelfAttention(\n",
       "              (query): Linear(in_features=768, out_features=768, bias=True)\n",
       "              (key): Linear(in_features=768, out_features=768, bias=True)\n",
       "              (value): Linear(in_features=768, out_features=768, bias=True)\n",
       "              (dropout): Dropout(p=0.1)\n",
       "            )\n",
       "            (output): BertSelfOutput(\n",
       "              (dense): Linear(in_features=768, out_features=768, bias=True)\n",
       "              (LayerNorm): BertLayerNorm()\n",
       "              (dropout): Dropout(p=0.1)\n",
       "            )\n",
       "          )\n",
       "          (intermediate): BertIntermediate(\n",
       "            (dense): Linear(in_features=768, out_features=3072, bias=True)\n",
       "          )\n",
       "          (output): BertOutput(\n",
       "            (dense): Linear(in_features=3072, out_features=768, bias=True)\n",
       "            (LayerNorm): BertLayerNorm()\n",
       "            (dropout): Dropout(p=0.1)\n",
       "          )\n",
       "        )\n",
       "        (2): BertLayer(\n",
       "          (attention): BertAttention(\n",
       "            (self): BertSelfAttention(\n",
       "              (query): Linear(in_features=768, out_features=768, bias=True)\n",
       "              (key): Linear(in_features=768, out_features=768, bias=True)\n",
       "              (value): Linear(in_features=768, out_features=768, bias=True)\n",
       "              (dropout): Dropout(p=0.1)\n",
       "            )\n",
       "            (output): BertSelfOutput(\n",
       "              (dense): Linear(in_features=768, out_features=768, bias=True)\n",
       "              (LayerNorm): BertLayerNorm()\n",
       "              (dropout): Dropout(p=0.1)\n",
       "            )\n",
       "          )\n",
       "          (intermediate): BertIntermediate(\n",
       "            (dense): Linear(in_features=768, out_features=3072, bias=True)\n",
       "          )\n",
       "          (output): BertOutput(\n",
       "            (dense): Linear(in_features=3072, out_features=768, bias=True)\n",
       "            (LayerNorm): BertLayerNorm()\n",
       "            (dropout): Dropout(p=0.1)\n",
       "          )\n",
       "        )\n",
       "        (3): BertLayer(\n",
       "          (attention): BertAttention(\n",
       "            (self): BertSelfAttention(\n",
       "              (query): Linear(in_features=768, out_features=768, bias=True)\n",
       "              (key): Linear(in_features=768, out_features=768, bias=True)\n",
       "              (value): Linear(in_features=768, out_features=768, bias=True)\n",
       "              (dropout): Dropout(p=0.1)\n",
       "            )\n",
       "            (output): BertSelfOutput(\n",
       "              (dense): Linear(in_features=768, out_features=768, bias=True)\n",
       "              (LayerNorm): BertLayerNorm()\n",
       "              (dropout): Dropout(p=0.1)\n",
       "            )\n",
       "          )\n",
       "          (intermediate): BertIntermediate(\n",
       "            (dense): Linear(in_features=768, out_features=3072, bias=True)\n",
       "          )\n",
       "          (output): BertOutput(\n",
       "            (dense): Linear(in_features=3072, out_features=768, bias=True)\n",
       "            (LayerNorm): BertLayerNorm()\n",
       "            (dropout): Dropout(p=0.1)\n",
       "          )\n",
       "        )\n",
       "        (4): BertLayer(\n",
       "          (attention): BertAttention(\n",
       "            (self): BertSelfAttention(\n",
       "              (query): Linear(in_features=768, out_features=768, bias=True)\n",
       "              (key): Linear(in_features=768, out_features=768, bias=True)\n",
       "              (value): Linear(in_features=768, out_features=768, bias=True)\n",
       "              (dropout): Dropout(p=0.1)\n",
       "            )\n",
       "            (output): BertSelfOutput(\n",
       "              (dense): Linear(in_features=768, out_features=768, bias=True)\n",
       "              (LayerNorm): BertLayerNorm()\n",
       "              (dropout): Dropout(p=0.1)\n",
       "            )\n",
       "          )\n",
       "          (intermediate): BertIntermediate(\n",
       "            (dense): Linear(in_features=768, out_features=3072, bias=True)\n",
       "          )\n",
       "          (output): BertOutput(\n",
       "            (dense): Linear(in_features=3072, out_features=768, bias=True)\n",
       "            (LayerNorm): BertLayerNorm()\n",
       "            (dropout): Dropout(p=0.1)\n",
       "          )\n",
       "        )\n",
       "        (5): BertLayer(\n",
       "          (attention): BertAttention(\n",
       "            (self): BertSelfAttention(\n",
       "              (query): Linear(in_features=768, out_features=768, bias=True)\n",
       "              (key): Linear(in_features=768, out_features=768, bias=True)\n",
       "              (value): Linear(in_features=768, out_features=768, bias=True)\n",
       "              (dropout): Dropout(p=0.1)\n",
       "            )\n",
       "            (output): BertSelfOutput(\n",
       "              (dense): Linear(in_features=768, out_features=768, bias=True)\n",
       "              (LayerNorm): BertLayerNorm()\n",
       "              (dropout): Dropout(p=0.1)\n",
       "            )\n",
       "          )\n",
       "          (intermediate): BertIntermediate(\n",
       "            (dense): Linear(in_features=768, out_features=3072, bias=True)\n",
       "          )\n",
       "          (output): BertOutput(\n",
       "            (dense): Linear(in_features=3072, out_features=768, bias=True)\n",
       "            (LayerNorm): BertLayerNorm()\n",
       "            (dropout): Dropout(p=0.1)\n",
       "          )\n",
       "        )\n",
       "        (6): BertLayer(\n",
       "          (attention): BertAttention(\n",
       "            (self): BertSelfAttention(\n",
       "              (query): Linear(in_features=768, out_features=768, bias=True)\n",
       "              (key): Linear(in_features=768, out_features=768, bias=True)\n",
       "              (value): Linear(in_features=768, out_features=768, bias=True)\n",
       "              (dropout): Dropout(p=0.1)\n",
       "            )\n",
       "            (output): BertSelfOutput(\n",
       "              (dense): Linear(in_features=768, out_features=768, bias=True)\n",
       "              (LayerNorm): BertLayerNorm()\n",
       "              (dropout): Dropout(p=0.1)\n",
       "            )\n",
       "          )\n",
       "          (intermediate): BertIntermediate(\n",
       "            (dense): Linear(in_features=768, out_features=3072, bias=True)\n",
       "          )\n",
       "          (output): BertOutput(\n",
       "            (dense): Linear(in_features=3072, out_features=768, bias=True)\n",
       "            (LayerNorm): BertLayerNorm()\n",
       "            (dropout): Dropout(p=0.1)\n",
       "          )\n",
       "        )\n",
       "        (7): BertLayer(\n",
       "          (attention): BertAttention(\n",
       "            (self): BertSelfAttention(\n",
       "              (query): Linear(in_features=768, out_features=768, bias=True)\n",
       "              (key): Linear(in_features=768, out_features=768, bias=True)\n",
       "              (value): Linear(in_features=768, out_features=768, bias=True)\n",
       "              (dropout): Dropout(p=0.1)\n",
       "            )\n",
       "            (output): BertSelfOutput(\n",
       "              (dense): Linear(in_features=768, out_features=768, bias=True)\n",
       "              (LayerNorm): BertLayerNorm()\n",
       "              (dropout): Dropout(p=0.1)\n",
       "            )\n",
       "          )\n",
       "          (intermediate): BertIntermediate(\n",
       "            (dense): Linear(in_features=768, out_features=3072, bias=True)\n",
       "          )\n",
       "          (output): BertOutput(\n",
       "            (dense): Linear(in_features=3072, out_features=768, bias=True)\n",
       "            (LayerNorm): BertLayerNorm()\n",
       "            (dropout): Dropout(p=0.1)\n",
       "          )\n",
       "        )\n",
       "        (8): BertLayer(\n",
       "          (attention): BertAttention(\n",
       "            (self): BertSelfAttention(\n",
       "              (query): Linear(in_features=768, out_features=768, bias=True)\n",
       "              (key): Linear(in_features=768, out_features=768, bias=True)\n",
       "              (value): Linear(in_features=768, out_features=768, bias=True)\n",
       "              (dropout): Dropout(p=0.1)\n",
       "            )\n",
       "            (output): BertSelfOutput(\n",
       "              (dense): Linear(in_features=768, out_features=768, bias=True)\n",
       "              (LayerNorm): BertLayerNorm()\n",
       "              (dropout): Dropout(p=0.1)\n",
       "            )\n",
       "          )\n",
       "          (intermediate): BertIntermediate(\n",
       "            (dense): Linear(in_features=768, out_features=3072, bias=True)\n",
       "          )\n",
       "          (output): BertOutput(\n",
       "            (dense): Linear(in_features=3072, out_features=768, bias=True)\n",
       "            (LayerNorm): BertLayerNorm()\n",
       "            (dropout): Dropout(p=0.1)\n",
       "          )\n",
       "        )\n",
       "        (9): BertLayer(\n",
       "          (attention): BertAttention(\n",
       "            (self): BertSelfAttention(\n",
       "              (query): Linear(in_features=768, out_features=768, bias=True)\n",
       "              (key): Linear(in_features=768, out_features=768, bias=True)\n",
       "              (value): Linear(in_features=768, out_features=768, bias=True)\n",
       "              (dropout): Dropout(p=0.1)\n",
       "            )\n",
       "            (output): BertSelfOutput(\n",
       "              (dense): Linear(in_features=768, out_features=768, bias=True)\n",
       "              (LayerNorm): BertLayerNorm()\n",
       "              (dropout): Dropout(p=0.1)\n",
       "            )\n",
       "          )\n",
       "          (intermediate): BertIntermediate(\n",
       "            (dense): Linear(in_features=768, out_features=3072, bias=True)\n",
       "          )\n",
       "          (output): BertOutput(\n",
       "            (dense): Linear(in_features=3072, out_features=768, bias=True)\n",
       "            (LayerNorm): BertLayerNorm()\n",
       "            (dropout): Dropout(p=0.1)\n",
       "          )\n",
       "        )\n",
       "        (10): BertLayer(\n",
       "          (attention): BertAttention(\n",
       "            (self): BertSelfAttention(\n",
       "              (query): Linear(in_features=768, out_features=768, bias=True)\n",
       "              (key): Linear(in_features=768, out_features=768, bias=True)\n",
       "              (value): Linear(in_features=768, out_features=768, bias=True)\n",
       "              (dropout): Dropout(p=0.1)\n",
       "            )\n",
       "            (output): BertSelfOutput(\n",
       "              (dense): Linear(in_features=768, out_features=768, bias=True)\n",
       "              (LayerNorm): BertLayerNorm()\n",
       "              (dropout): Dropout(p=0.1)\n",
       "            )\n",
       "          )\n",
       "          (intermediate): BertIntermediate(\n",
       "            (dense): Linear(in_features=768, out_features=3072, bias=True)\n",
       "          )\n",
       "          (output): BertOutput(\n",
       "            (dense): Linear(in_features=3072, out_features=768, bias=True)\n",
       "            (LayerNorm): BertLayerNorm()\n",
       "            (dropout): Dropout(p=0.1)\n",
       "          )\n",
       "        )\n",
       "        (11): BertLayer(\n",
       "          (attention): BertAttention(\n",
       "            (self): BertSelfAttention(\n",
       "              (query): Linear(in_features=768, out_features=768, bias=True)\n",
       "              (key): Linear(in_features=768, out_features=768, bias=True)\n",
       "              (value): Linear(in_features=768, out_features=768, bias=True)\n",
       "              (dropout): Dropout(p=0.1)\n",
       "            )\n",
       "            (output): BertSelfOutput(\n",
       "              (dense): Linear(in_features=768, out_features=768, bias=True)\n",
       "              (LayerNorm): BertLayerNorm()\n",
       "              (dropout): Dropout(p=0.1)\n",
       "            )\n",
       "          )\n",
       "          (intermediate): BertIntermediate(\n",
       "            (dense): Linear(in_features=768, out_features=3072, bias=True)\n",
       "          )\n",
       "          (output): BertOutput(\n",
       "            (dense): Linear(in_features=3072, out_features=768, bias=True)\n",
       "            (LayerNorm): BertLayerNorm()\n",
       "            (dropout): Dropout(p=0.1)\n",
       "          )\n",
       "        )\n",
       "      )\n",
       "    )\n",
       "    (pooler): BertPooler(\n",
       "      (dense): Linear(in_features=768, out_features=768, bias=True)\n",
       "      (activation): Tanh()\n",
       "    )\n",
       "  )\n",
       "  (cls): BertOnlyMLMHead(\n",
       "    (predictions): BertLMPredictionHead(\n",
       "      (transform): BertPredictionHeadTransform(\n",
       "        (dense): Linear(in_features=768, out_features=768, bias=True)\n",
       "        (LayerNorm): BertLayerNorm()\n",
       "      )\n",
       "      (decoder): Linear(in_features=768, out_features=30522, bias=False)\n",
       "    )\n",
       "  )\n",
       ")"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "modelpath = \"bert-base-uncased\"\n",
    "tokenizer = BertTokenizer.from_pretrained(modelpath)\n",
    "# Convert inputs to PyTorch tensors\n",
    "\n",
    "# Load pre-trained model (weights)\n",
    "model = BertForMaskedLM.from_pretrained(modelpath)\n",
    "model.eval()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Analyse data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "import seaborn as sns\n",
    "in_file = open(\"in.m2\", \"r\")\n",
    "sents = in_file.read()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 249,
   "metadata": {},
   "outputs": [],
   "source": [
    "probs = []\n",
    "for sent in sents.split(\"\\n\")[:-1]:\n",
    "    sent = sent.split(\" \")\n",
    "    # Process sent with spacy\n",
    "    proc_sent = processWithSpacy(sent, res_dict[\"nlp\"])\n",
    "    # Calculate avg token prob of the sent so far.\n",
    "    prob = res_dict[\"lm\"].score(proc_sent.text, bos=True, eos=True)/len(proc_sent)\n",
    "    probs.append(prob)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 250,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1572b3f98>"
      ]
     },
     "execution_count": 250,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.distplot(probs)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* since about half of the original sentences' scores are over 2.5, so it would not be a good idea to apply the same thresholds for all the sentences"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## check the distribusions for the corrected scores"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 664,
   "metadata": {},
   "outputs": [
    {
     "ename": "AttributeError",
     "evalue": "'list' object has no attribute 'split'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-664-497baac10848>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0msent_res\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'sent_res.txt'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"w\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 7\u001b[0;31m \u001b[0;32mfor\u001b[0m \u001b[0msent\u001b[0m \u001b[0;32min\u001b[0m \u001b[0msents\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msplit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"\\n\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      8\u001b[0m     \u001b[0msent1\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msent\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msplit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\" \"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      9\u001b[0m     \u001b[0;31m# Process sent with spacy\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mAttributeError\u001b[0m: 'list' object has no attribute 'split'"
     ]
    }
   ],
   "source": [
    "sent_15 = open('sent_15.txt', \"w\")\n",
    "sent_20 = open('sent_20.txt', \"w\")\n",
    "sent_25 = open('sent_25.txt', \"w\")\n",
    "sent_30 = open('sent_30.txt', \"w\")\n",
    "sent_res = open('sent_res.txt', \"w\")\n",
    "\n",
    "for sent in sents.split(\"\\n\")[:-1]:\n",
    "    sent1 = sent.split(\" \")\n",
    "    # Process sent with spacy\n",
    "    proc_sent = processWithSpacy(sent1, res_dict[\"nlp\"])\n",
    "    # Calculate avg token prob of the sent so far.\n",
    "    print(proc_sent)\n",
    "    prob = res_dict[\"lm\"].score(proc_sent.text, bos=True, eos=True)/len(proc_sent)\n",
    "    if prob > -1.5:\n",
    "        sent_15.write(sent + \"\\n\")\n",
    "    elif prob > -2.0:\n",
    "        sent_20.write(sent + \"\\n\")\n",
    "    elif prob > -2.5:\n",
    "        sent_25.write(sent + \"\\n\")\n",
    "    elif prob > -3.0:\n",
    "        sent_30.write(sent + \"\\n\")\n",
    "    else:\n",
    "        sent_res.write(sent + \"\\n\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'processSent' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-9-625504029323>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     18\u001b[0m     \u001b[0mj\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     19\u001b[0m     \u001b[0;31m#while has_errors:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 20\u001b[0;31m     \u001b[0msents\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mprocessSent\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msent\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     21\u001b[0m     \u001b[0;32mfor\u001b[0m \u001b[0msent\u001b[0m \u001b[0;32min\u001b[0m \u001b[0msents\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     22\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mtype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msents\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'processSent' is not defined"
     ]
    }
   ],
   "source": [
    "i = 0\n",
    "org = open('sent_15.txt', \"r\")\n",
    "\n",
    "org_propose_probs1 = []\n",
    "for sent in org.read().split(\"\\n\"):\n",
    "    i = i + 1\n",
    "    upper = False\n",
    "    if sent.isupper(): \n",
    "        sent = sent.lower()\n",
    "        upper = True\n",
    "    # Strip whitespace and split sent into tokens.\n",
    "    sent = sent.strip().split()\n",
    "    # If the line is empty, preserve the newline in output and continue\n",
    "    if not sent: \n",
    "        continue\n",
    "    # Search for and make corrections while has_errors is true\n",
    "    has_errors = True\n",
    "    j = 0\n",
    "    #while has_errors:\n",
    "    sents = processSent(sent,1)\n",
    "    for sent in sents:\n",
    "        if type(sents) is list:\n",
    "            proc_sent = processWithSpacy(sent.split(\" \"), res_dict[\"nlp\"])\n",
    "            prob = res_dict[\"lm\"].score(proc_sent.text, bos=True, eos=True)/len(proc_sent)\n",
    "            org_propose_probs1.append(prob)\n",
    "        else:\n",
    "            proc_sent = processWithSpacy(sents.split(\" \"), res_dict[\"nlp\"])\n",
    "            prob = res_dict[\"lm\"].score(proc_sent.text, bos=True, eos=True)/len(proc_sent)\n",
    "            org_propose_probs1.append(prob)\n",
    "            break"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 306,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x15d3d5f28>"
      ]
     },
     "execution_count": 306,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x1296 with 6 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from matplotlib.pyplot import figure\n",
    "import matplotlib.pyplot as plt\n",
    "figure(figsize=(20, 18))\n",
    "\n",
    "plt.subplot(2, 3, 1)\n",
    "plt.title('prob > -1.5')\n",
    "sns.distplot(cor_probs1)\n",
    "\n",
    "plt.subplot(2, 3, 2)\n",
    "plt.title('-1.5 > prob > -2.0')\n",
    "sns.distplot(cor_probs2)\n",
    "\n",
    "plt.subplot(2, 3, 3)\n",
    "plt.title('-2.0 > prob > -2.5')\n",
    "sns.distplot(cor_probs3)\n",
    "\n",
    "plt.subplot(2, 3, 4)\n",
    "sns.set_style('dark')\n",
    "plt.title('-2.5 > prob > -3.0')\n",
    "sns.distplot(cor_probs4)\n",
    "\n",
    "plt.subplot(2, 3, 5)\n",
    "sns.set_style('dark')\n",
    "plt.title('-3.0 > prob')\n",
    "sns.distplot(cor_probs5)\n",
    "\n",
    "\n",
    "plt.subplot(2, 3, 6)\n",
    "sns.set_style('dark')\n",
    "plt.title('all')\n",
    "sns.distplot(cor_probs1)\n",
    "sns.distplot(cor_probs2)\n",
    "sns.distplot(cor_probs3)\n",
    "sns.distplot(cor_probs4)\n",
    "sns.distplot(cor_probs5)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* as you can see, origin sentences with lower scores are likely to get lower candidates."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 162,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-2.3407171037462025\n"
     ]
    }
   ],
   "source": [
    "sent = \"People get certain diseases because of genetic changes .\"\n",
    "proc_sent = processWithSpacy(sent.split(\" \"), res_dict[\"nlp\"])\n",
    "prob = res_dict[\"lm\"].score(proc_sent.text, bos=True, eos=True)/len(proc_sent)\n",
    "print(prob)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "org = open('sent_20.txt', \"r\")\n",
    "\n",
    "prob2 = []\n",
    "for sent in org.read().split(\"\\n\"):\n",
    "    i = i + 1\n",
    "    upper = False\n",
    "    if sent.isupper(): \n",
    "        sent = sent.lower()\n",
    "        upper = True\n",
    "    # Strip whitespace and split sent into tokens.\n",
    "    sent = sent.strip().split()\n",
    "    proc_sent = processWithSpacy(sent, res_dict[\"nlp\"])\n",
    "    prob = res_dict[\"lm\"].score(proc_sent.text, bos=True, eos=True)/len(proc_sent)\n",
    "    prob2.append(prob)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "from matplotlib.pyplot import figure\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-1.5775000000000001\n",
      "-1.39612448378014\n",
      "1.1299135702632823\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "aa = [-2.0396, -1.5837, -1.4498, -1.3546, -1.9531, -1.2914, -1.3703]\n",
    "\n",
    "plt.subplot(2, 1, 1)\n",
    "sns.distplot(aa)\n",
    "sns.distplot(prob1)\n",
    "\n",
    "aa = np.array(aa)\n",
    "print(aa.mean())\n",
    "a1 = np.array(prob1)\n",
    "print(a1.mean())\n",
    "print(aa.mean()/a1.mean())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 153,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-1.8377555555555556\n",
      "-1.824032261145764\n",
      "1.0075236029000778\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "aa = [-1.9540, -1.6279, -1.9450, -1.8636, -2.0412, -1.6820, -1.7981, -1.8737, -1.7701, -1.7406, -1.9157, -1.8977, \n",
    "      -1.9237, -1.8290, -1.7073, -1.9117, -1.7723, -1.7507, -1.9425, -1.7069, -1.6311, -1.6774, -1.9430, -1.7788,\n",
    "      -1.9519, -1.8723, -1.8765, -1.8337, -1.8836, -2.0712, -1.9740, -1.7925, -1.8108, -1.7590, -1.9332, -1.7165]\n",
    "\n",
    "plt.subplot(2, 1, 1)\n",
    "sns.distplot(aa)\n",
    "sns.distplot(prob2)\n",
    "\n",
    "aa = np.array(aa)\n",
    "print(aa.mean())\n",
    "a2 = np.array(prob2)\n",
    "print(a2.mean())\n",
    "print(aa.mean()/a2.mean())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 270,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-2.440557019463901\n"
     ]
    }
   ],
   "source": [
    "sent = \"Thus , much thought need to put on the immediate family as it could cause a stir of unwanted events from the patient or the family members itself .\"\n",
    "proc_sent = processWithSpacy(sent.split(\" \"), res_dict[\"nlp\"])\n",
    "prob = res_dict[\"lm\"].score(proc_sent.text, bos=True, eos=True)/len(proc_sent)\n",
    "print(prob)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 271,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-2.5807472222222225\n",
      "-2.692606623321793\n",
      "0.9584568350494612\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "aa = [-2.3407, -2.7291, -2.8561, -2.7136, -2.6545, -2.7110, -2.5977, -2.4980, -2.5933, -2.2771, -2.4652, -2.7295,\n",
    "      -2.8680, -2.5539, -2.5599, -2.5518, -2.8472, -2.7252, -2.6324, -2.5336, -2.4773, -2.6306, -2.4995, -2.8479,\n",
    "      -2.7821, -2.7136, -2.6787, -2.3253, -2.4606, -2.3723, -2.4283, -2.5218, -2.3325, -2.4212, -2.5369, -2.4405]\n",
    "\n",
    "sns.distplot(aa)\n",
    "sns.distplot(prob4)\n",
    "\n",
    "aa = np.array(aa)\n",
    "print(aa.mean())\n",
    "a4 = np.array(prob4)\n",
    "print(a4.mean())\n",
    "print(aa.mean()/a4.mean())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 160,
   "metadata": {},
   "outputs": [],
   "source": [
    "org = open('sent_30.txt', \"r\")\n",
    "\n",
    "prob4 = []\n",
    "for sent in org.read().split(\"\\n\"):\n",
    "    i = i + 1\n",
    "    upper = False\n",
    "    if sent.isupper(): \n",
    "        sent = sent.lower()\n",
    "        upper = True\n",
    "    # Strip whitespace and split sent into tokens.\n",
    "    sent = sent.strip().split()\n",
    "    proc_sent = processWithSpacy(sent, res_dict[\"nlp\"])\n",
    "    prob = res_dict[\"lm\"].score(proc_sent.text, bos=True, eos=True)/len(proc_sent)\n",
    "    prob4.append(prob)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 156,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-3.0233081081081083\n",
      "-3.2250742764552283\n",
      "0.9374382879116548\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "aa = [-2.971, -3.049, -3.015, -2.704, -3.181, -3.071, -2.861, -2.927, -3.039, -2.968, -2.793, -2.870, -3.084, -2.938, -3.095\n",
    ", -2.874, -3.044, -3.341, -3.386, -3.368, -3.053, -3.073, -2.955, -3.192, -3.190, -2.745, -3.060, -3.060, -2.943, -2.979\n",
    ", -2.720, -2.859, -2.990, -3.112, -3.1094, -3.301, -2.942]\n",
    "\n",
    "sns.distplot(aa)\n",
    "sns.distplot(prob5)\n",
    "\n",
    "aa = np.array(aa)\n",
    "print(aa.mean())\n",
    "a5 = np.array(prob5)\n",
    "print(a5.mean())\n",
    "print(aa.mean()/a5.mean())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 158,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-2.20696551724138\n",
      "-2.2506349559853325\n",
      "0.9805968361826878\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "aa = [-1.943, -1.878, -2.082, -1.985, -2.354, -2.339, -2.272, -2.282, -2.238, -2.446, -2.434, -2.403, -2.324,\n",
    "     -2.232, -2.278, -2.005, -2.043, -2.394, -2.302, -2.127, -2.055, -2.212, -2.408, -1.817, -2.134, -2.299,\n",
    "     -2.397, -2.139, -2.180]\n",
    "\n",
    "sns.distplot(aa)\n",
    "sns.distplot(prob3)\n",
    "\n",
    "aa = np.array(aa)\n",
    "print(aa.mean())\n",
    "a3 = np.array(prob3)\n",
    "print(a3.mean())\n",
    "print(aa.mean()/a3.mean())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* \"Many syndromes such as Down Syndrome and Taylor Syndrome can be prevented to happen if the mother undergo proper medication and do n't consume harmful goods during the pregnancy period .\"\n",
    "    to happen -> from happening (only work when two corrections are taken togethor)\n",
    "\n",
    "* \"On the other hand , if there are ways can help us to control or cure the disease , we can go through these process from the scope of the whole family .\"\n",
    "    process -> processes (-1.787 -> -1785)\n",
    "\n",
    "* a lot of error type are remove words."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [],
   "source": [
    "error = []\n",
    "error.append([])\n",
    "error.append([])\n",
    "error.append([])\n",
    "error.append([])\n",
    "error.append([])\n",
    "\n",
    "def ana_error(tok_id, cands, sent, orig_prob, error_type):\n",
    "    # Save candidates here.\n",
    "    edit_dict = {}\n",
    "    # Loop through the input alternative candidates\n",
    "    for cand in cands:\n",
    "        # Copy the input sentence\n",
    "        new_sent = sent[:]\n",
    "        # Change the target token with the current cand\n",
    "        new_sent[tok_id] = cand\n",
    "        # Remove empty strings from the list (for deletions)\n",
    "        new_sent = list(filter(None, new_sent))\n",
    "        # Give the edit a unique identifier\n",
    "        proc_sent = processWithSpacy(new_sent, res_dict[\"nlp\"])\n",
    "        # Calculate avg token prob of the sent so far.\n",
    "        prob = res_dict[\"lm\"].score(proc_sent.text, bos=True, eos=True)/len(proc_sent)\n",
    "        if orig_prob < -3.0:\n",
    "            error[4].append(prob)\n",
    "        elif orig_prob < -2.6:\n",
    "            error[3].append(prob)\n",
    "        elif orig_prob < -2.3:\n",
    "            error[2].append(prob)\n",
    "        elif orig_prob < -2.0:\n",
    "            error[1].append(prob)\n",
    "        else:\n",
    "            error[0].append(prob)\n",
    "            "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "def processSent(sent, j):\n",
    "    ret_cand = []\n",
    "    # Process sent with spacy\n",
    "    proc_sent = processWithSpacy(sent, res_dict[\"nlp\"])\n",
    "    # Calculate avg token prob of the sent so far.\n",
    "    orig_prob = res_dict[\"lm\"].score(proc_sent.text, bos=True, eos=True)/len(proc_sent)\n",
    "    #print(\"orig: \", orig_prob)\n",
    "    # Store all the candidate corrected sentences here\n",
    "    cand_dict = {}\n",
    "    # Process each token.\n",
    "    for tok in proc_sent:\n",
    "        # SPELLCHECKING\n",
    "        # Spell check: tok must be alphabetical and not a real word.\n",
    "                             #and not res_dict[\"gb\"].spell(tok.text):\n",
    "        if tok.text.isalpha():\n",
    "            cands = res_dict[\"gb\"].suggest(tok.text)\n",
    "            # Generate correction candidates\n",
    "            ana_error(tok.i, cands, sent, orig_prob, 5)\n",
    "            if orig_prob < -3.2:\n",
    "                cand_dict.update(generateCands(tok.i, cands, sent, 0.98, 1))\n",
    "            elif orig_prob < -2.7:\n",
    "                cand_dict.update(generateCands(tok.i, cands, sent, 0.96, 1))\n",
    "            elif orig_prob < -2.2:\n",
    "                cand_dict.update(generateCands(tok.i, cands, sent, 0.95, 1))\n",
    "            else:\n",
    "                cand_dict.update(generateCands(tok.i, cands, sent, 0.92, 1))   \n",
    "        \n",
    "            #print(thre1, end=\"\")\n",
    "            #if cands: cand_dict.update(generateCands(tok.i, cands, sent, 0.95, 1))\n",
    "       \n",
    "        \n",
    "        # MORPHOLOGY\n",
    "        if tok.lemma_ in res_dict[\"gb_infl\"]:\n",
    "            cands = res_dict[\"gb_infl\"][tok.lemma_]\n",
    "            \n",
    "            if orig_prob < -3.2:\n",
    "                cand_dict.update(generateCands(tok.i, cands, sent, 0.99, 3))\n",
    "            elif orig_prob < -2.45:\n",
    "                cand_dict.update(generateCands(tok.i, cands, sent, 0.985, 3))\n",
    "            elif orig_prob < -1.8:\n",
    "                cand_dict.update(generateCands(tok.i, cands, sent, 0.98, 3))\n",
    "            else :\n",
    "                cand_dict.update(generateCands(tok.i, cands, sent, 0.945, 3))\n",
    "            \n",
    "            #print(cands)\n",
    "            #cand_dict.update(generateCands(tok.i, cands, sent, 0.98, 3))\n",
    "        # DETERMINERS\n",
    "        if tok.text in res_dict[\"det\"]:\n",
    "            if orig_prob < -2.85:\n",
    "                cand_dict.update(generateCands(tok.i, res_dict[\"det\"], sent, 0.97, 4))\n",
    "            elif orig_prob < -2.5:\n",
    "                cand_dict.update(generateCands(tok.i, res_dict[\"det\"], sent, 0.96, 4))\n",
    "            elif orig_prob < -1.85:\n",
    "                cand_dict.update(generateCands(tok.i, res_dict[\"det\"], sent, 0.95, 4))\n",
    "            else:\n",
    "                cand_dict.update(generateCands(tok.i, res_dict[\"det\"], sent, 0.935, 4))\n",
    "            \n",
    "            #print(thre3, end=\"\")\n",
    "            #cand_dict.update(generateCands(tok.i, res_dict[\"det\"], sent, 0.95, 4))\n",
    "        # PREPOSITIONS\n",
    "        if tok.text in res_dict[\"prep\"]:\n",
    "            if orig_prob < -2.9:\n",
    "                cand_dict.update(generateCands(tok.i, res_dict[\"prep\"], sent, 0.93, 5))\n",
    "            elif orig_prob < -2.5:\n",
    "                cand_dict.update(generateCands(tok.i, res_dict[\"prep\"], sent, 0.94, 5))\n",
    "            elif orig_prob < -1.8:\n",
    "                cand_dict.update(generateCands(tok.i, res_dict[\"prep\"], sent, 0.96, 5))  \n",
    "            else:\n",
    "                cand_dict.update(generateCands(tok.i, res_dict[\"prep\"], sent, 0.98, 5))\n",
    "            \n",
    "            #print(thre4, end=\"\")\n",
    "            #cand_dict.update(generateCands(tok.i, res_dict[\"prep\"], sent, 0.97, 5))\n",
    "    # Keep track of the best sent if any\n",
    "    best_prob = float(\"-inf\")\n",
    "    best_sent = []\n",
    "    # Loop through the candidate edits; edit[-1] is the error type weight\n",
    "    for edit, cand_sent in cand_dict.items():\n",
    "        # Score the candidate sentence\n",
    "        cand_prob = res_dict[\"lm\"].score(\" \".join(cand_sent), bos=True, eos=True)/len(cand_sent)\n",
    "        \"\"\"\n",
    "        print(cand_prob, \"\\t\", orig_prob)\n",
    "        print(\"likely\\t\\t\", end = \"\")\n",
    "        cand_sent.insert(edit[0], \"***\")\n",
    "        cand_sent.insert(edit[0]+2, \"***\")\n",
    "        print(\" \".join(cand_sent))\n",
    "        cand_sent.pop(edit[0])\n",
    "        cand_sent.pop(edit[0]+1)\n",
    "        \"\"\"\n",
    "        if cand_prob / orig_prob < edit[-1]:\n",
    "            \n",
    "            print(cand_prob, \"\\t\", orig_prob)\n",
    "            print(\"likely\\t\\t\", end = \"\")\n",
    "            \n",
    "            if edit[1] != \"\":\n",
    "                cand_sent.insert(edit[0], \"***\")\n",
    "                cand_sent.insert(edit[0]+2, \"***\")\n",
    "                print(\" \".join(cand_sent))\n",
    "                cand_sent.pop(edit[0])\n",
    "                cand_sent.pop(edit[0]+1)\n",
    "            else:\n",
    "                cand_sent.insert(edit[0], \"***\")\n",
    "                cand_sent.insert(edit[0]+1, \"***\")\n",
    "                print(\" \".join(cand_sent))\n",
    "                cand_sent.pop(edit[0])\n",
    "                cand_sent.pop(edit[0])\n",
    "            \n",
    "            ret_cand.append(\" \".join(cand_sent))\n",
    "        \n",
    "        if cand_prob > (1 - (1 - edit[-1])/j)*orig_prob and cand_prob > best_prob:\n",
    "            best_prob = cand_prob\n",
    "            best_sent = cand_sent\n",
    "    \n",
    "    # Return the best sentence and a boolean whether to search for more errors\n",
    "    if best_sent: return best_sent, True\n",
    "    else: return sent, False\n",
    "    \n",
    "    #if ret_cand: return ret_cand\n",
    "    #else: return \" \".join(sent)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n",
      "2\n",
      "-2.8839473724365234 \t -2.956801005772182\n",
      "likely\t\t*** genetic *** risk refers more to your chance of inheriting a disorder or disease .\n",
      "-2.887543269566127 \t -2.956801005772182\n",
      "likely\t\tGenetic risk *** refer *** more to your chance of inheriting a disorder or disease .\n",
      "-2.8146896362304688 \t -2.8839473724365234\n",
      "likely\t\tgenetic risk *** refer *** more to your chance of inheriting a disorder or disease .\n",
      "3\n",
      "-2.3407171037462025 \t -2.5481323666042752\n",
      "likely\t\tPeople get certain *** diseases *** because of genetic changes .\n",
      "-2.3407171037462025 \t -2.5481323666042752\n",
      "likely\t\tPeople get certain *** diseases *** because of genetic changes .\n",
      "4\n",
      "-2.1004725004497327 \t -2.164175535503187\n",
      "likely\t\tHow much a genetic change tells us about your *** chances *** of developing a disorder is not always clear .\n",
      "5\n",
      "6\n",
      "7\n",
      "8\n",
      "9\n",
      "-2.7291392371768044 \t -2.8970189775739397\n",
      "likely\t\tWhen we are *** diagnosed *** out with certain genetic disease , are we suppose to disclose this result to our relatives ?\n",
      "-2.7632698785691034 \t -2.8970189775739397\n",
      "likely\t\tWhen we are diagonosed out with certain genetic disease , are we *** supposed *** to disclose this result to our relatives ?\n",
      "-2.7632698785691034 \t -2.8970189775739397\n",
      "likely\t\tWhen we are diagonosed out with certain genetic disease , are we *** supposed *** to disclose this result to our relatives ?\n",
      "-2.595390138171968 \t -2.7291392371768044\n",
      "likely\t\tWhen we are diagnosed out with certain genetic disease , are we *** supposed *** to disclose this result to our relatives ?\n",
      "-2.595390138171968 \t -2.7291392371768044\n",
      "likely\t\tWhen we are diagnosed out with certain genetic disease , are we *** supposed *** to disclose this result to our relatives ?\n",
      "-2.5544920421781994 \t -2.595390138171968\n",
      "likely\t\tWhen we are diagnosed out with certain genetic *** diseases *** , are we supposed to disclose this result to our relatives ?\n",
      "10\n",
      "11\n",
      "-2.597225552513486 \t -2.7136973426455544\n",
      "likely\t\tOn one hand , we do not want this potential danger *** caused *** firghtenning affects in our families ' later lives .\n",
      "12\n",
      "-2.700465235216864 \t -2.7467183080212823\n",
      "likely\t\tWhen people around us know that we *** get *** certain disease , their altitudes will be easily changed , whether caring us too much or keeping away from us .\n",
      "-2.59771675899111 \t -2.7467183080212823\n",
      "likely\t\tWhen people around us know that we got certain disease , their *** attitudes *** will be easily changed , whether caring us too much or keeping away from us .\n",
      "-2.6787217238853716 \t -2.7467183080212823\n",
      "likely\t\tWhen people around us know that we got certain disease , their *** altitude *** will be easily changed , whether caring us too much or keeping away from us .\n",
      "-2.551463686186692 \t -2.59771675899111\n",
      "likely\t\tWhen people around us know that we *** get *** certain disease , their attitudes will be easily changed , whether caring us too much or keeping away from us .\n",
      "-2.538715231007543 \t -2.59771675899111\n",
      "likely\t\tWhen people around us know that we got certain disease , their attitudes *** would *** be easily changed , whether caring us too much or keeping away from us .\n",
      "-2.492462421285695 \t -2.538715231007543\n",
      "likely\t\tWhen people around us know that we *** get *** certain disease , their attitudes would be easily changed , whether caring us too much or keeping away from us .\n",
      "-2.4198100649077317 \t -2.492462421285695\n",
      "likely\t\tWhen people around us know that we get certain *** diseases *** , their attitudes would be easily changed , whether caring us too much or keeping away from us .\n",
      "13\n",
      "14\n",
      "-1.8959962945235402 \t -1.9501509415475946\n",
      "likely\t\tSurrounded by such concerns , it is very likely that we are *** distracting *** to worry about these problems .\n",
      "15\n",
      "16\n",
      "-1.943055586381392 \t -2.0476448752663354\n",
      "likely\t\tOn the other hand , if there are ways can help us to control or cure the disease , we can *** go *** through thses process from the scope of the whole family .\n",
      "-1.8783708052201704 \t -2.0476448752663354\n",
      "likely\t\tOn the other hand , if there are ways can help us to control or cure the disease , we can going through *** these *** process from the scope of the whole family .\n",
      "-1.7870848684599905 \t -1.8783708052201704\n",
      "likely\t\tOn the other hand , if there are ways can help us to control or cure the disease , we can *** go *** through these process from the scope of the whole family .\n",
      "17\n",
      "-2.4386429963288485 \t -2.516229417588976\n",
      "likely\t\tFor an example , if *** exercised *** is helpful for family potential disease , we can always look for more chances for the family to go exercise .\n",
      "-2.3896546540436923 \t -2.516229417588976\n",
      "likely\t\tFor an example , if *** exercise *** is helpful for family potential disease , we can always look for more chances for the family to go exercise .\n",
      "18\n",
      "19\n",
      "20\n",
      "21\n",
      "22\n",
      "-2.403770685195923 \t -2.497565984725952\n",
      "likely\t\tIn fact , *** require *** someone to communicate his or her own genetic risk to family members who are therefore also at risk is considered by many to be ethically dubious . ''\n",
      "-2.4390852451324463 \t -2.497565984725952\n",
      "likely\t\tIn fact , *** requires *** someone to communicate his or her own genetic risk to family members who are therefore also at risk is considered by many to be ethically dubious . ''\n",
      "-2.450866460800171 \t -2.497565984725952\n",
      "likely\t\tIn fact , *** required *** someone to communicate his or her own genetic risk to family members who are therefore also at risk is considered by many to be ethically dubious . ''\n",
      "23\n",
      "24\n",
      "-2.4311434427897134 \t -2.491571299235026\n",
      "likely\t\tIf certain disease genetic test is very accurate and it is unavoidable and necessary to get treatment and known by others , it is OK to disclose the *** results *** .\n",
      "25\n",
      "26\n",
      "-2.4728362139533546 \t -2.5328330993652344\n",
      "likely\t\t*** genetic *** risk does carry its consequences and should not be taken lightly within the family circle .\n",
      "27\n",
      "-2.37066834548424 \t -2.4391805714574355\n",
      "likely\t\tAfterall , what affects one family may or may not affect another although the *** family *** has a common genetic make up , shared by either of the parents .\n",
      "-2.354699233482624 \t -2.4391805714574355\n",
      "likely\t\tAfterall , what affects one family may or may not affect another although the families *** have *** a common genetic make up , shared by either of the parents .\n",
      "-2.3462016664702317 \t -2.4391805714574355\n",
      "likely\t\tAfterall , what affects one family may or may not affect another although the families *** had *** a common genetic make up , shared by either of the parents .\n",
      "28\n",
      "-2.339229038783482 \t -2.4779083251953127\n",
      "likely\t\tIn cases where an individual has gotten to know of a genetic disorder , disclosing or otherwise , to his or her relative is solely a matter of preference within the *** individual *** moral system .\n",
      "29\n",
      "30\n",
      "31\n",
      "-2.656410043889826 \t -2.778977307406339\n",
      "likely\t\tThis knowledge *** may be *** relavant to them , and vice versa .\n",
      "-2.2771334214644 \t -2.778977307406339\n",
      "likely\t\tThis knowledge maybe *** relevant *** to them , and vice versa .\n",
      "-2.6636198217218574 \t -2.778977307406339\n",
      "likely\t\tThis knowledge maybe *** relaxant *** to them , and vice versa .\n",
      "-2.6639187552712182 \t -2.778977307406339\n",
      "likely\t\tThis knowledge maybe *** reliant *** to them , and vice versa .\n",
      "-1.890633843161843 \t -2.2771334214644\n",
      "likely\t\tThis knowledge *** may be *** relevant to them , and vice versa .\n",
      "32\n",
      "33\n",
      "34\n",
      "-2.8234317302703857 \t -3.0526983737945557\n",
      "likely\t\t*** No *** one who suffered from this disease keep it a secret of infrom their relatives ?\n",
      "-2.9144017696380615 \t -3.0526983737945557\n",
      "likely\t\tDo one who suffered from this disease *** kept *** it a secret of infrom their relatives ?\n",
      "-2.748142719268799 \t -3.0526983737945557\n",
      "likely\t\tDo one who suffered from this disease keep it a secret of *** inform *** their relatives ?\n",
      "-2.8698341846466064 \t -3.0526983737945557\n",
      "likely\t\tDo one who suffered from this disease keep it a secret of *** in from *** their relatives ?\n",
      "-2.518876075744629 \t -2.748142719268799\n",
      "likely\t\t*** No *** one who suffered from this disease keep it a secret of inform their relatives ?\n",
      "-2.6352744102478027 \t -2.748142719268799\n",
      "likely\t\t*** To *** one who suffered from this disease keep it a secret of inform their relatives ?\n",
      "-2.704714775085449 \t -2.748142719268799\n",
      "likely\t\tDo one who *** suffer *** from this disease keep it a secret of inform their relatives ?\n",
      "-2.6098461151123047 \t -2.748142719268799\n",
      "likely\t\tDo one who suffered from this disease *** kept *** it a secret of inform their relatives ?\n",
      "-2.4911835193634033 \t -2.748142719268799\n",
      "likely\t\tDo one who suffered from this disease keep it a secret *** to *** inform their relatives ?\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-2.2619166374206543 \t -2.4911835193634033\n",
      "likely\t\t*** No *** one who suffered from this disease keep it a secret to inform their relatives ?\n",
      "-2.4477550983428955 \t -2.4911835193634033\n",
      "likely\t\tDo one who *** suffer *** from this disease keep it a secret to inform their relatives ?\n",
      "-2.369260549545288 \t -2.4911835193634033\n",
      "likely\t\tDo one who suffered from this disease *** kept *** it a secret to inform their relatives ?\n",
      "-2.139993667602539 \t -2.2619166374206543\n",
      "likely\t\tNo one who suffered from this disease *** kept *** it a secret to inform their relatives ?\n",
      "-2.0965652465820312 \t -2.139993667602539\n",
      "likely\t\tNo one who *** suffer *** from this disease kept it a secret to inform their relatives ?\n",
      "35\n",
      "-2.506728036063058 \t -2.7378868829636347\n",
      "likely\t\tIn retrospect , *** it *** is also ones duty to ensure that he or she undergo periodic healthchecks in their own .\n",
      "-2.5931263878231956 \t -2.7378868829636347\n",
      "likely\t\tIn retrospect , its is also *** one *** duty to ensure that he or she undergo periodic healthchecks in their own .\n",
      "-2.5931263878231956 \t -2.7378868829636347\n",
      "likely\t\tIn retrospect , its is also *** one *** duty to ensure that he or she undergo periodic healthchecks in their own .\n",
      "-2.632716950916109 \t -2.7378868829636347\n",
      "likely\t\tIn retrospect , its is also ones duty to ensure that he or she *** undergoes *** periodic healthchecks in their own .\n",
      "-2.6048801967075894 \t -2.7378868829636347\n",
      "likely\t\tIn retrospect , its is also ones duty to ensure that he or she undergo periodic *** health checks *** in their own .\n",
      "-2.58441162109375 \t -2.7378868829636347\n",
      "likely\t\tIn retrospect , its is also ones duty to ensure that he or she undergo periodic *** healthcare *** in their own .\n",
      "-2.331526438395182 \t -2.506728036063058\n",
      "likely\t\tIn retrospect , it is also *** one *** duty to ensure that he or she undergo periodic healthchecks in their own .\n",
      "-2.331526438395182 \t -2.506728036063058\n",
      "likely\t\tIn retrospect , it is also *** one *** duty to ensure that he or she undergo periodic healthchecks in their own .\n",
      "-2.401558104015532 \t -2.506728036063058\n",
      "likely\t\tIn retrospect , it is also ones duty to ensure that he or she *** undergoes *** periodic healthchecks in their own .\n",
      "-2.373721168154762 \t -2.506728036063058\n",
      "likely\t\tIn retrospect , it is also ones duty to ensure that he or she undergo periodic *** health checks *** in their own .\n",
      "-2.3532527741931735 \t -2.506728036063058\n",
      "likely\t\tIn retrospect , it is also ones duty to ensure that he or she undergo periodic *** healthcare *** in their own .\n",
      "-2.2263563246954057 \t -2.331526438395182\n",
      "likely\t\tIn retrospect , it is also one duty to ensure that he or she *** undergoes *** periodic healthchecks in their own .\n",
      "-2.198519752139137 \t -2.331526438395182\n",
      "likely\t\tIn retrospect , it is also one duty to ensure that he or she undergo periodic *** health checks *** in their own .\n",
      "-2.1780511765252974 \t -2.331526438395182\n",
      "likely\t\tIn retrospect , it is also one duty to ensure that he or she undergo periodic *** healthcare *** in their own .\n",
      "-2.072881062825521 \t -2.1780511765252974\n",
      "likely\t\tIn retrospect , it is also one duty to ensure that he or she *** undergoes *** periodic healthcare in their own .\n",
      "36\n",
      "37\n",
      "38\n",
      "-2.202108434728674 \t -2.2543664880701013\n",
      "likely\t\tFor example , within a family , regardless of who had first received genetic information , parents were seen as having the primary responsibility to pass on information to any offspring , either *** adults *** at risk .\n",
      "39\n",
      "40\n",
      "41\n",
      "42\n",
      "43\n",
      "44\n",
      "-2.3247389221191406 \t -2.413655090332031\n",
      "likely\t\tUltimately , one must bring attention to who may benefit from such information and *** assist *** those at risk to make considered decisions about disclosure .\n",
      "-2.344163055419922 \t -2.413655090332031\n",
      "likely\t\tUltimately , one must bring attention to who may benefit from such information and assisting those at risk to make considered decisions about *** disclosures *** .\n",
      "-2.255246887207031 \t -2.3247389221191406\n",
      "likely\t\tUltimately , one must bring attention to who may benefit from such information and assist those at risk to make considered decisions about *** disclosures *** .\n",
      "45\n",
      "-2.8467310587565104 \t -2.905228678385417\n",
      "likely\t\t*** whose *** duty it is to inform at risk relatives or not greatly depends on the personal moral and the nature of how 'directive ' the risk is to them .\n",
      "-2.8591763814290365 \t -2.905228678385417\n",
      "likely\t\tWhose duty it *** was *** to inform at risk relatives or not greatly depends on the personal moral and the nature of how 'directive ' the risk is to them .\n",
      "-2.8563575744628906 \t -2.905228678385417\n",
      "likely\t\tWhose duty it is to inform at risk relatives or not greatly depends on the personal *** morals *** and the nature of how 'directive ' the risk is to them .\n",
      "-2.775801340738932 \t -2.8467310587565104\n",
      "likely\t\twhose duty it *** was *** to inform at risk relatives or not greatly depends on the personal moral and the nature of how 'directive ' the risk is to them .\n",
      "-2.797859700520833 \t -2.8467310587565104\n",
      "likely\t\twhose duty it is to inform at risk relatives or not greatly depends on the personal *** morals *** and the nature of how 'directive ' the risk is to them .\n",
      "-2.7269302368164063 \t -2.775801340738932\n",
      "likely\t\twhose duty it was to inform at risk relatives or not greatly depends on the personal *** morals *** and the nature of how 'directive ' the risk is to them .\n",
      "46\n",
      "-3.0712779651988638 \t -3.196152773770419\n",
      "likely\t\tPeople with close blood *** relationships *** generally carry some similar genes .\n",
      "47\n",
      "-2.553931007922535 \t -2.608972683758803\n",
      "likely\t\tIn this case , if one of the family members or close relatives is found to carry genetic risk , it is better for the patient to tell his/her close relatives about the issue and let others *** know *** about the risk so that his/her familay members are able to perform some daily excesses to prevent the potential disease or they may go to hospital and check for the correspongding flows .\n",
      "48\n",
      "49\n",
      "50\n",
      "-2.4497833251953125 \t -2.8088009174053488\n",
      "likely\t\tFocus on the negative side of the *** annoyance *** of genetic risk first .\n",
      "-2.6550254821777344 \t -2.8088009174053488\n",
      "likely\t\tFocus on the negative side of the *** announce *** of genetic risk first .\n",
      "-2.373340606689453 \t -2.8088009174053488\n",
      "likely\t\tFocus on the negative side of the *** nuance *** of genetic risk first .\n",
      "51\n",
      "-2.232257334391276 \t -2.3208185831705728\n",
      "likely\t\tLarge numbers of patients with the genetic risk would want to keep it as a secret as the genetic risk may *** indicate *** their high chance to carry certain disease .\n",
      "52\n",
      "-2.6825196549699113 \t -2.8181117289775126\n",
      "likely\t\tEspecially for the young people without *** marriage *** , if he/she is known to have some genetic risk , it may have certain chance that his/her child would carry the same disease , but not in certain .\n",
      "53\n",
      "-2.9545247695025276 \t -3.11249901266659\n",
      "likely\t\tTherefore , to keep the information *** a *** secret to his/her future spouce would help the relationship .\n",
      "-2.8610877990722656 \t -3.11249901266659\n",
      "likely\t\tTherefore , to keep the information as secret to his/her future *** spouse *** would help the relationship .\n",
      "-2.703113555908203 \t -2.8610877990722656\n",
      "likely\t\tTherefore , to keep the information *** a *** secret to his/her future spouse would help the relationship .\n",
      "54\n",
      "55\n",
      "56\n",
      "57\n",
      "-2.927979060581752 \t -3.102344240461077\n",
      "likely\t\tFirst , for the case of *** marriage *** , people should be honest and tell his/her spouce they may carry certain genetic risk that may affect their offsprings .\n",
      "-3.0497703552246094 \t -3.102344240461077\n",
      "likely\t\tFirst , for the case of marrige , people should be honest and tell his/her spouce they may carry certain genetic *** risks *** that may affect their offsprings .\n",
      "-2.9684363773890903 \t -3.102344240461077\n",
      "likely\t\tFirst , for the case of marrige , people should be honest and tell his/her spouce they may carry certain genetic risk that may affect their *** offspring *** .\n",
      "-2.9684363773890903 \t -3.102344240461077\n",
      "likely\t\tFirst , for the case of marrige , people should be honest and tell his/her spouce they may carry certain genetic risk that may affect their *** offspring *** .\n",
      "-2.8754051753452847 \t -2.927979060581752\n",
      "likely\t\tFirst , for the case of marriage , people should be honest and tell his/her spouce they may carry certain genetic *** risks *** that may affect their offsprings .\n",
      "-2.7940711975097656 \t -2.927979060581752\n",
      "likely\t\tFirst , for the case of marriage , people should be honest and tell his/her spouce they may carry certain genetic risk that may affect their *** offspring *** .\n",
      "-2.7940711975097656 \t -2.927979060581752\n",
      "likely\t\tFirst , for the case of marriage , people should be honest and tell his/her spouce they may carry certain genetic risk that may affect their *** offspring *** .\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-2.741497312273298 \t -2.7940711975097656\n",
      "likely\t\tFirst , for the case of marriage , people should be honest and tell his/her spouce they may carry certain genetic *** risks *** that may affect their offspring .\n",
      "58\n",
      "-2.0542843158428488 \t -2.132771712083083\n",
      "likely\t\tIt is better to let the other *** parties *** know the fact than after the baby is born and certain type of genetic disease is found .\n",
      "-2.086725088266226 \t -2.132771712083083\n",
      "likely\t\tIt is better to let the other party *** knew *** the fact than after the baby is born and certain type of genetic disease is found .\n",
      "-2.0656575423020582 \t -2.132771712083083\n",
      "likely\t\tIt is better to let the other party know the fact than after the baby is born and certain *** types *** of genetic disease is found .\n",
      "-1.9871701460618238 \t -2.0542843158428488\n",
      "likely\t\tIt is better to let the other parties know the fact than after the baby is born and certain *** types *** of genetic disease is found .\n",
      "59\n",
      "60\n",
      "-2.431611590915256 \t -2.5626013014051647\n",
      "likely\t\tSecondly , genetic disease has a close relationship with the *** bear *** gene together with their daily habits .\n",
      "-2.5045704311794705 \t -2.5626013014051647\n",
      "likely\t\tSecondly , genetic disease has a close relationship with the *** bears *** gene together with their daily habits .\n",
      "61\n",
      "62\n",
      "63\n",
      "-2.2534024047851564 \t -2.359535675048828\n",
      "likely\t\tOtherwise , if the other parties *** do *** not know , they may end up with to have diabete in the future without any prevention .\n",
      "-2.1272369384765626 \t -2.359535675048828\n",
      "likely\t\tOtherwise , if the other parties did not know , they may end up with to have *** diabetes *** in the future without any prevention .\n",
      "-2.0211036682128904 \t -2.1272369384765626\n",
      "likely\t\tOtherwise , if the other parties *** do *** not know , they may end up with to have diabetes in the future without any prevention .\n",
      "64\n",
      "-2.7973981857299806 \t -2.9093957901000977\n",
      "likely\t\tIn conclusion , we could tell the benefits of telling genetic risk to the carriers relatives *** overweight *** the costs .\n",
      "65\n",
      "66\n",
      "67\n",
      "-2.370213928222656 \t -2.4343231201171873\n",
      "likely\t\t*** genetic *** disorder may or may not be hirataged hereditary disease and it is sometimes hard to find out one has these kinds of diseases .\n",
      "68\n",
      "-2.212007634779986 \t -2.2582868688246784\n",
      "likely\t\tIt is a long time discussion that whether a carrier of a known genetic risk should be obligated to tell his or her relatives that his or her disease is caused by *** genes *** .\n",
      "69\n",
      "-2.2024036589122953 \t -2.326634543282645\n",
      "likely\t\tFrom the legal *** aspects *** , the answer is no but from the ethical aspect , the answer should be yes .\n",
      "-2.2024036589122953 \t -2.326634543282645\n",
      "likely\t\tFrom the legal *** aspects *** , the answer is no but from the ethical aspect , the answer should be yes .\n",
      "70\n",
      "-2.7310946537898135 \t -2.8920050400954027\n",
      "likely\t\tWe *** can *** n't make a law to push a carrier of a known genetic risk to tell his or her relatives about his genetic problem .\n",
      "71\n",
      "72\n",
      "-2.4012240091959636 \t -2.462468465169271\n",
      "likely\t\tFirstly , someone *** had *** what kinds of disease belongs to his or her privacy .\n",
      "-2.4045140584309896 \t -2.462468465169271\n",
      "likely\t\tFirstly , someone *** has *** what kinds of disease belongs to his or her privacy .\n",
      "-2.408575439453125 \t -2.462468465169271\n",
      "likely\t\tFirstly , someone having what *** kind *** of disease belongs to his or her privacy .\n",
      "-2.347331237792969 \t -2.4012240091959636\n",
      "likely\t\tFirstly , someone had what *** kind *** of disease belongs to his or her privacy .\n",
      "73\n",
      "-2.7638577355278864 \t -3.116297827826606\n",
      "likely\t\t*** Privacy *** protection belongs to one 's human rights .\n",
      "-2.980879889594184 \t -3.116297827826606\n",
      "likely\t\t*** Privy *** protection belongs to one 's human rights .\n",
      "-3.0672420925564237 \t -3.116297827826606\n",
      "likely\t\tPrivicy protection *** belonging *** to one 's human rights .\n",
      "-3.0624923706054688 \t -3.116297827826606\n",
      "likely\t\tPrivicy protection *** belong *** to one 's human rights .\n",
      "-2.608133316040039 \t -2.7638577355278864\n",
      "likely\t\t*** privacy *** protection belongs to one 's human rights .\n",
      "-2.714801788330078 \t -2.7638577355278864\n",
      "likely\t\tPrivacy protection *** belonging *** to one 's human rights .\n",
      "-2.710052066379123 \t -2.7638577355278864\n",
      "likely\t\tPrivacy protection *** belong *** to one 's human rights .\n",
      "-2.559077580769857 \t -2.608133316040039\n",
      "likely\t\tprivacy protection *** belonging *** to one 's human rights .\n",
      "-2.554327858818902 \t -2.608133316040039\n",
      "likely\t\tprivacy protection *** belong *** to one 's human rights .\n",
      "74\n",
      "75\n",
      "-1.8174430622774012 \t -2.116555606617647\n",
      "likely\t\tIt is *** against *** his or her human rights and it is against the law 's spirit .\n",
      "76\n",
      "77\n",
      "-2.205502510070801 \t -2.26126766204834\n",
      "likely\t\tWhat *** are *** the basic difference between genetic disorder and other disorders .\n",
      "78\n",
      "79\n",
      "80\n",
      "81\n",
      "-2.2995259320294417 \t -2.461300320095486\n",
      "likely\t\tHowever , there are many problems againt the execution of asking a carrier to tell his or her *** relatives *** the cause of his or her diseases .\n",
      "-2.179798408790871 \t -2.2995259320294417\n",
      "likely\t\tHowever , there are many problems *** against *** the execution of asking a carrier to tell his or her relatives the cause of his or her diseases .\n",
      "82\n",
      "83\n",
      "84\n",
      "85\n",
      "-2.3373710087367465 \t -2.4211180550711497\n",
      "likely\t\tOther relatives may have the same *** possibility *** to have such kind of disease .\n",
      "86\n",
      "-2.6958314804803756 \t -2.7755201430547807\n",
      "likely\t\tHow can a law *** making *** by government exempt such a group of people from preparing to face their potetial disease ?\n",
      "-2.533666519891648 \t -2.7755201430547807\n",
      "likely\t\tHow can a law made by government exempt such a group of people from preparing to face their *** potential *** disease ?\n",
      "-2.4539778573172435 \t -2.533666519891648\n",
      "likely\t\tHow can a law *** making *** by government exempt such a group of people from preparing to face their potential disease ?\n",
      "87\n",
      "88\n",
      "-2.630697103647085 \t -2.766415522648738\n",
      "likely\t\tTo the carrier himself *** or *** herself , he of she should have a feeling of resposiblity to tell his or her relatives their genetic disorder .\n",
      "-2.4773697486290565 \t -2.766415522648738\n",
      "likely\t\tTo the carrier himself of herself , he *** or *** she should have a feeling of resposiblity to tell his or her relatives their genetic disorder .\n",
      "-2.4773697486290565 \t -2.766415522648738\n",
      "likely\t\tTo the carrier himself of herself , he *** or *** she should have a feeling of resposiblity to tell his or her relatives their genetic disorder .\n",
      "-2.4995753948505106 \t -2.766415522648738\n",
      "likely\t\tTo the carrier himself of herself , he of she should have a feeling of *** responsibility *** to tell his or her relatives their genetic disorder .\n",
      "-2.6528604947603664 \t -2.766415522648738\n",
      "likely\t\tTo the carrier himself of herself , he of she should have a feeling of *** responsibly *** to tell his or her relatives their genetic disorder .\n",
      "-2.5733346205491285 \t -2.766415522648738\n",
      "likely\t\tTo the carrier himself of herself , he of she should have a feeling of *** possibility *** to tell his or her relatives their genetic disorder .\n",
      "-2.3416514763465295 \t -2.4773697486290565\n",
      "likely\t\tTo the carrier himself *** or *** herself , he or she should have a feeling of resposiblity to tell his or her relatives their genetic disorder .\n",
      "-2.3416514763465295 \t -2.4773697486290565\n",
      "likely\t\tTo the carrier himself *** or *** herself , he or she should have a feeling of resposiblity to tell his or her relatives their genetic disorder .\n",
      "-2.210529767549955 \t -2.4773697486290565\n",
      "likely\t\tTo the carrier himself of herself , he or she should have a feeling of *** responsibility *** to tell his or her relatives their genetic disorder .\n",
      "-2.2842886998103213 \t -2.4773697486290565\n",
      "likely\t\tTo the carrier himself of herself , he or she should have a feeling of *** possibility *** to tell his or her relatives their genetic disorder .\n",
      "-2.074811348548302 \t -2.210529767549955\n",
      "likely\t\tTo the carrier himself *** or *** herself , he or she should have a feeling of responsibility to tell his or her relatives their genetic disorder .\n",
      "-2.074811348548302 \t -2.210529767549955\n",
      "likely\t\tTo the carrier himself *** or *** herself , he or she should have a feeling of responsibility to tell his or her relatives their genetic disorder .\n",
      "89\n",
      "-1.4425897598266602 \t -1.487887978553772\n",
      "likely\t\tBy doing this , they may be able to save some lives *** with *** their relatives .\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "90\n",
      "91\n",
      "-2.7821245193481445 \t -3.0348947048187256\n",
      "likely\t\tA typical example is genetic *** causes *** hypertension .\n",
      "-2.818598508834839 \t -3.0348947048187256\n",
      "likely\t\tA typical example is genetic *** cause *** hypertension .\n",
      "-2.7821245193481445 \t -3.0348947048187256\n",
      "likely\t\tA typical example is genetic *** causes *** hypertension .\n",
      "-2.818598508834839 \t -3.0348947048187256\n",
      "likely\t\tA typical example is genetic *** cause *** hypertension .\n",
      "92\n",
      "-2.6583596801757814 \t -2.704875793457031\n",
      "likely\t\tHypertension can be caused by genetic problems which *** makes *** the carrier harder to digest the fat and salt in blood which can cause hypertension .\n",
      "93\n",
      "-2.7335357666015625 \t -2.933593432108561\n",
      "likely\t\tPeople usually get this kind of *** hypertension *** after they become adult .\n",
      "-2.7580795288085938 \t -2.933593432108561\n",
      "likely\t\tPeople usually get this kind of *** hypertensive *** after they become adult .\n",
      "-2.6897942225138345 \t -2.933593432108561\n",
      "likely\t\tPeople usually get this kind of hypertesion after they become *** adults *** .\n",
      "-2.6897942225138345 \t -2.933593432108561\n",
      "likely\t\tPeople usually get this kind of hypertesion after they become *** adults *** .\n",
      "-2.489736557006836 \t -2.6897942225138345\n",
      "likely\t\tPeople usually get this kind of *** hypertension *** after they become adults .\n",
      "-2.514280319213867 \t -2.6897942225138345\n",
      "likely\t\tPeople usually get this kind of *** hypertensive *** after they become adults .\n",
      "94\n",
      "-2.2808659871419272 \t -2.4306028456914994\n",
      "likely\t\tHowever , if they already know they have a gene that may make them have higher possibilities to get *** hypertension *** .\n",
      "95\n",
      "96\n",
      "97\n",
      "98\n",
      "99\n",
      "100\n",
      "-2.0138025283813477 \t -2.178243637084961\n",
      "likely\t\tIt is able to detect the *** illness *** or diseases and even a child 's parentage .\n",
      "-2.0834314823150635 \t -2.178243637084961\n",
      "likely\t\tIt is able to detect the illnesses *** of *** diseases and even a child 's parentage .\n",
      "-2.110881805419922 \t -2.178243637084961\n",
      "likely\t\tIt is able to detect the illnesses or *** disease *** and even a child 's parentage .\n",
      "101\n",
      "102\n"
     ]
    },
    {
     "ename": "KeyboardInterrupt",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-46-cddec54bf2ee>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     27\u001b[0m     \u001b[0mj\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     28\u001b[0m     \u001b[0;32mwhile\u001b[0m \u001b[0mhas_errors\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 29\u001b[0;31m         \u001b[0msent\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mhas_errors\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mprocessSent\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msent\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mj\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     30\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     31\u001b[0m     \u001b[0mout_ques\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwrite\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mwhole\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;34m\"\\n\\n\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m<ipython-input-45-452204b0860c>\u001b[0m in \u001b[0;36mprocessSent\u001b[0;34m(sent, j)\u001b[0m\n\u001b[1;32m     16\u001b[0m             \u001b[0mcands\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mres_dict\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"gb\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msuggest\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtok\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtext\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     17\u001b[0m             \u001b[0;31m# Generate correction candidates\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 18\u001b[0;31m             \u001b[0mana_error\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtok\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcands\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msent\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0morig_prob\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m5\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     19\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0morig_prob\u001b[0m \u001b[0;34m<\u001b[0m \u001b[0;34m-\u001b[0m\u001b[0;36m3.2\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     20\u001b[0m                 \u001b[0mcand_dict\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mgenerateCands\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtok\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcands\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msent\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0.98\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m<ipython-input-44-cefe66187cd9>\u001b[0m in \u001b[0;36mana_error\u001b[0;34m(tok_id, cands, sent, orig_prob, error_type)\u001b[0m\n\u001b[1;32m     18\u001b[0m         \u001b[0mnew_sent\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnew_sent\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     19\u001b[0m         \u001b[0;31m# Give the edit a unique identifier\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 20\u001b[0;31m         \u001b[0mproc_sent\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mprocessWithSpacy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnew_sent\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mres_dict\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"nlp\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     21\u001b[0m         \u001b[0;31m# Calculate avg token prob of the sent so far.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     22\u001b[0m         \u001b[0mprob\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mres_dict\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"lm\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mscore\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mproc_sent\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtext\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbos\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0meos\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m/\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mproc_sent\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m<ipython-input-7-4cfbc7569c00>\u001b[0m in \u001b[0;36mprocessWithSpacy\u001b[0;34m(sent, nlp)\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mprocessWithSpacy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msent\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnlp\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m     \u001b[0mproc_sent\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnlp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtokenizer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtokens_from_list\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msent\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m     \u001b[0mnlp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtagger\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mproc_sent\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mproc_sent\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32mtokenizer.pyx\u001b[0m in \u001b[0;36mspacy.tokenizer.Tokenizer.tokens_from_list\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32mtokenizer.pyx\u001b[0m in \u001b[0;36mspacy.tokenizer.Tokenizer.tokens_from_list\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32m/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/spacy/errors.py\u001b[0m in \u001b[0;36mdeprecation_warning\u001b[0;34m(message)\u001b[0m\n\u001b[1;32m    451\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    452\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mdeprecation_warning\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmessage\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 453\u001b[0;31m     \u001b[0m_warn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmessage\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"deprecation\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    454\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    455\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/spacy/errors.py\u001b[0m in \u001b[0;36m_warn\u001b[0;34m(message, warn_type)\u001b[0m\n\u001b[1;32m    470\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mwarn_type\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mSPACY_WARNING_TYPES\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mignore_warning\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    471\u001b[0m         \u001b[0mcategory\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mWARNINGS\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mwarn_type\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 472\u001b[0;31m         \u001b[0mstack\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0minspect\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstack\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    473\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0mwarnings\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcatch_warnings\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    474\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mSPACY_WARNING_FILTER\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/inspect.py\u001b[0m in \u001b[0;36mstack\u001b[0;34m(context)\u001b[0m\n\u001b[1;32m   1509\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mstack\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcontext\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1510\u001b[0m     \u001b[0;34m\"\"\"Return a list of records for the stack above the caller's frame.\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1511\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mgetouterframes\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msys\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getframe\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcontext\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1512\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1513\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mtrace\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcontext\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/inspect.py\u001b[0m in \u001b[0;36mgetouterframes\u001b[0;34m(frame, context)\u001b[0m\n\u001b[1;32m   1486\u001b[0m     \u001b[0mframelist\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1487\u001b[0m     \u001b[0;32mwhile\u001b[0m \u001b[0mframe\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1488\u001b[0;31m         \u001b[0mframeinfo\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mframe\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mgetframeinfo\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mframe\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcontext\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1489\u001b[0m         \u001b[0mframelist\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mFrameInfo\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mframeinfo\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1490\u001b[0m         \u001b[0mframe\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mframe\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mf_back\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/inspect.py\u001b[0m in \u001b[0;36mgetframeinfo\u001b[0;34m(frame, context)\u001b[0m\n\u001b[1;32m   1460\u001b[0m         \u001b[0mstart\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlineno\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0;36m1\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0mcontext\u001b[0m\u001b[0;34m//\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1461\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1462\u001b[0;31m             \u001b[0mlines\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlnum\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfindsource\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mframe\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1463\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mOSError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1464\u001b[0m             \u001b[0mlines\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mindex\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/inspect.py\u001b[0m in \u001b[0;36mfindsource\u001b[0;34m(object)\u001b[0m\n\u001b[1;32m    766\u001b[0m     is raised if the source code cannot be retrieved.\"\"\"\n\u001b[1;32m    767\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 768\u001b[0;31m     \u001b[0mfile\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgetsourcefile\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobject\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    769\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mfile\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    770\u001b[0m         \u001b[0;31m# Invalidate cache if needed.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/inspect.py\u001b[0m in \u001b[0;36mgetsourcefile\u001b[0;34m(object)\u001b[0m\n\u001b[1;32m    694\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mfilename\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    695\u001b[0m     \u001b[0;31m# only return a non-existent filename if the module has a PEP 302 loader\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 696\u001b[0;31m     \u001b[0;32mif\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mgetmodule\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobject\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfilename\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'__loader__'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    697\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mfilename\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    698\u001b[0m     \u001b[0;31m# or it is in the linecache\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/inspect.py\u001b[0m in \u001b[0;36mgetmodule\u001b[0;34m(object, _filename)\u001b[0m\n\u001b[1;32m    732\u001b[0m     \u001b[0;32mfor\u001b[0m \u001b[0mmodname\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmodule\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msys\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmodules\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mitems\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    733\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mismodule\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodule\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mhasattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodule\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'__file__'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 734\u001b[0;31m             \u001b[0mf\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodule\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__file__\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    735\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mf\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0m_filesbymodname\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodname\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    736\u001b[0m                 \u001b[0;31m# Have already mapped this module, so skip it\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
     ]
    }
   ],
   "source": [
    "out_ans = open('out_ans.m2', \"w\")\n",
    "out_ques = open('out_ques.m2', \"w\")\n",
    "i = 0\n",
    "org = open('a.txt', \"r\")\n",
    "\n",
    "error1 = 0\n",
    "error2 = 0\n",
    "for whole in org.read().split(\"\\n\\n\"):\n",
    "    sent = whole.split(\"S \")[1]\n",
    "    this = len(sent.split(\"\\n\")) - 1\n",
    "    sent = sent.split(\"\\n\")[0]\n",
    "    error1 = error1 + this\n",
    "    i = i + 1\n",
    "    upper = False\n",
    "    if sent.isupper(): \n",
    "        sent = sent.lower()\n",
    "        upper = True\n",
    "    # Strip whitespace and split sent into tokens.\n",
    "    sent = sent.strip().split()\n",
    "    # If the line is empty, preserve the newline in output and continue\n",
    "    if not sent: \n",
    "        out_sents.write(\"\\n\")\n",
    "        print(\"aa\")\n",
    "        continue\n",
    "    # Search for and make corrections while has_errors is true\n",
    "    has_errors = True\n",
    "    j = 1\n",
    "    while has_errors:\n",
    "        sent, has_errors = processSent(sent, j)\n",
    "    \n",
    "    out_ques.write(whole + \"\\n\\n\")\n",
    "    out_ques.flush()\n",
    "    out_ans.write(\" \".join(sent) + \"\\n\")\n",
    "    out_ans.flush()\n",
    "    \"\"\"\n",
    "    for cand in sents:\n",
    "        out_ques.write(whole + \"\\n\\n\")\n",
    "        error2 = error2 + this\n",
    "        out_ques.flush()\n",
    "        if type(sents) is list:\n",
    "            out_ans.write(cand + \"\\n\")\n",
    "            out_ans.flush()\n",
    "            print(cand)\n",
    "        else:\n",
    "            out_ans.write(sents + \"\\n\")\n",
    "            out_ans.flush()\n",
    "            print(sents)\n",
    "            break\n",
    "    \"\"\"\n",
    "    print(i)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x2ac3bd3c8>"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x1296 with 5 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from matplotlib.pyplot import figure\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import numpy as np\n",
    "from matplotlib.pyplot import figure\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# error_type: PREPOSITIONS\n",
    "#canditates distribution according to orig_score\n",
    "\n",
    "figure(figsize=(20, 18))\n",
    "\n",
    "plt.subplot(2, 3, 1)\n",
    "plt.title('prob > -2.0')\n",
    "sns.distplot(error[0])\n",
    "\n",
    "plt.subplot(2, 3, 2)\n",
    "plt.title('prob > -2.3')\n",
    "sns.distplot(error[1])\n",
    "\n",
    "plt.subplot(2, 3, 3)\n",
    "plt.title('prob > -2.6')\n",
    "sns.distplot(error[2])\n",
    "\n",
    "plt.subplot(2, 3, 4)\n",
    "plt.title('prob > -3.0')\n",
    "sns.distplot(error[3])\n",
    "\n",
    "plt.subplot(2, 3, 5)\n",
    "plt.title('rest')\n",
    "sns.distplot(error[4])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x2acc39d30>"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x1296 with 5 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# error_type: PREPOSITIONS\n",
    "#canditates distribution according to orig_score\n",
    "\n",
    "figure(figsize=(20, 18))\n",
    "\n",
    "plt.subplot(2, 3, 1)\n",
    "plt.title('prob > -1.5')\n",
    "sns.distplot(error[0])\n",
    "\n",
    "plt.subplot(2, 3, 2)\n",
    "plt.title('prob > -2.0')\n",
    "sns.distplot(error[1])\n",
    "\n",
    "plt.subplot(2, 3, 3)\n",
    "plt.title('prob > -2.3')\n",
    "sns.distplot(error[2])\n",
    "\n",
    "plt.subplot(2, 3, 4)\n",
    "plt.title('prob > -2.6')\n",
    "sns.distplot(error[3])\n",
    "\n",
    "plt.subplot(2, 3, 5)\n",
    "plt.title('prob > -3.0')\n",
    "sns.distplot(error[4])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[[], [], [], [], []]"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "error1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
